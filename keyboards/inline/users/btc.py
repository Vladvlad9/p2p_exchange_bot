import asyncio
from decimal import Decimal

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BadRequest, ChatNotFound
from loguru import logger

from config.config import CONFIGTEXT, CONFIG
from crud import CRUDUsers, CRUDTransaction, CRUDCurrency
from crud.walCRUD import CRUDWallet
from handlers.users.AllCallbacks import btc_cb, byn_cb, main_cb, rub_cb
from handlers.users.Cryptocurrency import Cryptocurrency
from loader import bot
from schemas import TransactionSchema
from states.users.BtcState import BTCState


class BtcForm:

    @staticmethod
    async def isfloat(value: str):
        try:
            float(value)
            return True
        except ValueError:
            return False

    @staticmethod
    async def start_MainForm_ikb(user_id: int) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üíª –ü—Ä–æ—Ñ–∏–ª—å",
                                         callback_data=main_cb.new("Profile", "get_Profile", 0, user_id))
                ],
                [
                    InlineKeyboardButton(text="BYN üáßüáæ", callback_data=byn_cb.new("Pay", "EnterAmount", 0, user_id)),
                    InlineKeyboardButton(text="RUB üá∑üá∫", callback_data=rub_cb.new("Pay", "EnterAmount", 0, user_id)),
                    InlineKeyboardButton(text="BTC ‚Çø", callback_data=btc_cb.new("Pay", "EnterAmount", 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def back_ikb(user_id: int, target: str, page: int = 0, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param page: –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=btc_cb.new(target, action, page, user_id))
                ]
            ]
        )

    @staticmethod
    async def currency_ikb(user_id: int, target: str, actionBack: str) -> InlineKeyboardMarkup:
        """
                –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤–∞–ª—é—Ç—ã
                :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
                :return:
                """
        data = {
            "–û–ü–õ–ê–¢–ò–¢–¨ BYN üáßüáæ": {"target": "Buy", "action": "PayBTC", "id": "BYN", "editid": user_id},
            "–û–ü–õ–ê–¢–ò–¢–¨ RUB üá∑üá∫": {"target": "Buy", "action": "PayBTC", "id": "RUB", "editid": user_id},
        }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=btc_cb.new(name_items["target"],
                                                                             name_items["action"],
                                                                             name_items["id"],
                                                                             name_items["editid"]))
                    for name, name_items in data.items()
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=btc_cb.new(target, actionBack, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def buying_BTC(user_money, message, state):
        price_BYN = await Cryptocurrency.get_byn()
        price_RUB = await Cryptocurrency.get_rub()

        price_BTC = await Cryptocurrency.get_btc()

        bye_byn = round(Decimal(user_money) * Decimal(price_BTC) * Decimal(price_BYN), 2)
        bye_rub = round(Decimal(user_money) * Decimal(price_BTC) * Decimal(price_RUB), 2)

        text = f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ Bitcoin: {round(price_BTC)}$\n" \
               f"üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n" \
               f"–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –û–ü–õ–ê–¢–ò–¢–¨‚úÖ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ " \
               f"–æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ ‚è±{CONFIG.PAYMENT_TIMER / 60} –º–∏–Ω—É—Ç!\n\n" \
               f"üßæ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: üáßüáæ {bye_byn} BYN\n\n" \
               f"üßæ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: üá∑üá∫ {bye_rub} RUB\n\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC: {user_money}\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"–ü–ï–†–ï–ô–¢–ò –ö –û–ü–õ–ê–¢–ï?"

        # await state.update_data(exchange_RUB=float(Decimal(price_BTC) * Decimal(price_RUB)))
        await state.update_data(exchange_RUB=float(price_RUB))  # –∫—É—Ä—Å —Ä—É–±.
        await state.update_data(exchange_BYN=float(Decimal(price_BTC) * Decimal(price_BYN)))  # –∫—É—Ä—Å –±–µ–ª.

        await state.update_data(price_RUB=bye_rub)  # –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –≤ —Ä—É–±.
        await state.update_data(price_BYN=bye_byn)  # –∫–æ–Ω–µ—á–Ω–∞—è —Ü–µ–Ω–∞ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –≤ –±–µ–ª.

        await state.update_data(buy_BTC=user_money)  # –°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å BTC

        await message.answer(text=text,
                             reply_markup=await BtcForm.currency_ikb(
                                 user_id=message.from_user.id,
                                 target="MainForm",
                                 actionBack="get_MainForm")
                             )

    @staticmethod
    async def CheckOut_wallet_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ—à–µ–ª–µ–∫, —Å–ø—Ä–æ—Å–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–í–µ—Ä–Ω–æ üëå", callback_data=btc_cb.new("Buy", "get_requisites", 0, 0)),
                    InlineKeyboardButton(text="–ù–µ—Ç ‚õîÔ∏è", callback_data=btc_cb.new("MainForm", "get_MainForm", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def user_paid_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–Ø –û–ü–õ–ê–¢–ò–õ ‚úÖ", callback_data=btc_cb.new("UserPaid", 0, 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=btc_cb.new("MainForm", "get_MainForm", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def confirmation_timer(message):
        await asyncio.sleep(10)
        await message.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç "
                                  "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º.\n\n"
                                  "–ï—Å–ª–∏ –≤–∞–º –Ω–µ —Å–æ–æ–±—â–∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. "
                                  "–û–Ω –±—ã—Å—Ç—Ä–æ –≤—Å–µ —Ä–µ—à–∏—Ç.\n\n"
                                  "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ü§ó‚úåÔ∏è\n\n"
                                  "üöÄ –ñ–µ–ª–∞–µ–º –í–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!")

    @staticmethod
    @logger.catch
    async def process_btc(callback: CallbackQuery = None, message: Message = None, state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith('btc'):
                data = btc_cb.parse(callback_data=callback.data)

                if data.get("target") == "MainForm":
                    if data.get("action") == "get_MainForm":
                        await state.finish()
                        await callback.message.delete()
                        await callback.message.answer(text=CONFIGTEXT.MAIN_FORM.TEXT,
                                                      reply_markup=await BtcForm.start_MainForm_ikb(
                                                          user_id=callback.from_user.id)
                                                      )

                elif data.get("target") == "Pay":
                    if data.get("action") == "EnterAmount":
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ BTC:",
                                                         reply_markup=await BtcForm.back_ikb(
                                                             user_id=callback.from_user.id,
                                                             target="MainForm",
                                                             action="get_MainForm")
                                                         )
                        await BTCState.UserCoin.set()

                elif data.get("target") == "Buy":
                    if data.get("action") == "PayBTC":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        get_wallet = await CRUDWallet.get(user_id=user.id)
                        check_wallet = await Cryptocurrency.Check_Wallet(btc_address=get_wallet.address)

                        if check_wallet:
                            try:
                                currency = data.get("id")
                                get_data_buy = await state.get_data()
                                if currency == "BYN":
                                    get_currency = await CRUDCurrency.get(currency_id=1)
                                    await state.update_data(exchange_rate=get_data_buy['exchange_BYN'])
                                    await state.update_data(sale=get_data_buy['price_BYN'])
                                    await state.update_data(currency_id=get_currency.id)
                                    await state.update_data(currency=get_currency.name)
                                else:
                                    get_currency = await CRUDCurrency.get(currency_id=2)
                                    await state.update_data(exchange_rate=get_data_buy['exchange_RUB'])
                                    await state.update_data(sale=get_data_buy['price_RUB'])
                                    await state.update_data(currency_id=get_currency.id)
                                    await state.update_data(currency=get_currency.name)

                                get_btc = await state.get_data()
                                text = f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º BTC {get_btc['buy_BTC']} ‚û°Ô∏è‚û°Ô∏è‚û°\n\n" \
                                       f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å {get_btc['sale']} {get_btc['currency']}\n\n" \
                                       f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {get_wallet.address}\n" \
                                       f"–î–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∫–æ—à–µ–ª—å–∫—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n" \
                                       f"‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í—Å—ë –≤–µ—Ä–Ω–æ?\n" \
                                       f"–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É " \
                                       f"–ù–µ—Ç ‚õîÔ∏è, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.Ô∏è"

                                await state.update_data(wallet=get_wallet.address)
                                await callback.message.edit_text(text=text,
                                                                 reply_markup=await BtcForm.CheckOut_wallet_ikb())
                            except KeyError as e:
                                print(e)
                                await callback.message.edit_text(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                                 reply_markup=await BtcForm.start_MainForm_ikb(
                                                                     user_id=callback.from_user.id)
                                                                 )
                                await state.finish()
                                await callback.message.delete()
                        else:
                            await callback.message.edit_text(text=f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ <i>{get_wallet.address}</i> "
                                                                  f"–Ω–µ—Ç—É –≤ blockchain\n\n"
                                                                  f"–ñ–µ–ª–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –≤–∞—à –∞–¥—Ä–µ—Å Bitcoin - –∫–æ—à–µ–ª—å–∫–∞",
                                                             reply_markup=await BtcForm.back_ikb(
                                                                 user_id=callback.from_user.id,
                                                                 target="MainForm",
                                                                 action="get_MainForm"),
                                                             parse_mode="HTML"
                                                             )

                    elif data.get("action") == "get_requisites":
                        try:
                            wallet = await state.get_data()

                            text_wallet = f"üöÄ –ù–∞ –í–∞—à –∫–æ—à–µ–ª–µ–∫  ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è <i>{wallet['wallet']}</i>\n" \
                                          f"–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <i>{wallet['buy_BTC']}</i> BTC. üöÄ"
                            if wallet['currency'] == "BYN":
                                await callback.message.edit_text(text=f"{text_wallet}\n\n"
                                                                      f"{CONFIGTEXT.RequisitesBYN.TEXT}",
                                                                 reply_markup=await BtcForm.user_paid_ikb(),
                                                                 parse_mode="HTML"
                                                                 )
                            else:
                                await callback.message.edit_text(text=f"{text_wallet}\n\n"
                                                                      f"{CONFIGTEXT.RequisitesRUS.TEXT}",
                                                                 reply_markup=await BtcForm.user_paid_ikb(),
                                                                 parse_mode="HTML"
                                                                 )
                        except Exception as e:
                            print(e)
                            await callback.message.delete()
                            await state.finish()
                            await callback.message.edit_text(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                             reply_markup=await BtcForm.start_MainForm_ikb(
                                                                 user_id=callback.from_user.id)
                                                             )

                elif data.get("target") == "UserPaid":
                    await callback.message.edit_text(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É!\n"
                                                          "(–¥–æ 2 –ú–±)")
                    await BTCState.UserPhoto.set()

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                # –í–≤–æ–¥ –∫–æ—à–µ–ª—å–∫–∞
                if await state.get_state() == "BTCState:UserCoin":
                    money_int = message.text.isdigit()
                    money_float = await BtcForm.isfloat(value=message.text)

                    if money_float or money_int:
                        await BtcForm.buying_BTC(user_money=message.text,
                                                 message=message,
                                                 state=state)
                    else:
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")

                elif await state.get_state() == "BTCState:UserPhoto":
                    if message.content_type == "photo":
                        if message.photo[0].file_size > 2000:
                            await message.answer(text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 –º–±\n"
                                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑")
                            await BTCState.UserPhoto.set()
                        else:
                            get_photo = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
                            photo = message.photo[0].file_id

                            get_data = await state.get_data()

                            user = await CRUDUsers.get(user_id=message.from_user.id)

                            transaction = await CRUDTransaction.add(transaction=TransactionSchema(user_id=user.id,
                                                                                                  operation_id=1,
                                                                                                  **get_data)
                                                                    )

                            try:
                                await bot.download_file(file_path=get_photo.file_path,
                                                        destination=f'user_check/{transaction.id}_{message.from_user.id}.jpg',
                                                        timeout=12,
                                                        chunk_size=1215000)

                                get_transaction = await CRUDTransaction.get(transaction=transaction.id)
                                get_transaction.check = f'{transaction.id}_{message.from_user.id}'
                                await CRUDTransaction.update(transaction=get_transaction)

                                text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {transaction.id}\n\n" \
                                       f"–ò–º—è: {message.from_user.first_name}\n" \
                                       f"–ö—É—Ä—Å: {round(get_data['exchange_rate'])} {get_data['currency']}\n" \
                                       f"–ü–æ–ª—É—á–µ–Ω–æ BTC: {get_data['buy_BTC']}\n" \
                                       f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {get_data['currency']}: {get_data['sale']}\n" \
                                       f"–ö–æ—à–µ–ª—ë–∫: {get_data['wallet']}"

                                tasks = []
                                for admin in CONFIG.BOT.ADMINS:
                                    tasks.append(bot.send_photo(chat_id=admin, photo=photo,
                                                                caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª!\n\n"
                                                                        f"{text}"))
                                await asyncio.gather(*tasks, return_exceptions=True) # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —Å—Ä–∞–∑—É

                                await BtcForm.confirmation_timer(message=message)

                            except Exception as e:
                                print(e)
                                await message.answer(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                     reply_markup=await BtcForm.start_MainForm_ikb(
                                                         user_id=message.from_user.id)
                                                     )
                            await state.finish()
                    else:
                        await message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
                        await BTCState.UserPhoto.set()