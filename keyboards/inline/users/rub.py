import asyncio
from decimal import Decimal

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BadRequest
from loguru import logger

from config.config import CONFIGTEXT, CONFIG
from crud import CRUDCurrency, CRUDReferral, CRUDUsers, CRUDTransaction
from crud.transactions_referralsCRUD import CRUDTransactionReferrals
from crud.walCRUD import CRUDWallet
from handlers.users.AllCallbacks import main_cb, byn_cb, rub_cb, btc_cb
from handlers.users.Cryptocurrency import Cryptocurrency
from loader import bot
from schemas import TransactionSchema, UserInDBSchema, TransactionsReferralSchema
from states.users.RubState import RubState


class Rub:
    @staticmethod
    async def start_MainForm_ikb(user_id: int) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üíª –ü—Ä–æ—Ñ–∏–ª—å",
                                         callback_data=main_cb.new("Profile", "get_Profile", 0, user_id))
                ],
                [
                    InlineKeyboardButton(text="BYN üáßüáæ", callback_data=byn_cb.new("Pay", "EnterAmount", 0, user_id)),
                    InlineKeyboardButton(text="RUB üá∑üá∫", callback_data=rub_cb.new("Pay", "EnterAmount", 0, user_id)),
                    InlineKeyboardButton(text="BTC ‚Çø", callback_data=btc_cb.new("Pay", "EnterAmount", 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def back_ikb(user_id: int, target: str, page: int = 0, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param page: –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=rub_cb.new(target, action, page, user_id))
                ]
            ]
        )

    @staticmethod
    async def send_timer_message(chat_id: int, state):
        await state.finish()
        user = await CRUDUsers.get(user_id=chat_id)
        if user.buy_timer:
            await asyncio.sleep(0)
            user.buy_timer = False
            await CRUDUsers.update(user=user)
            return
        else:
            await bot.send_message(chat_id=chat_id,
                                   text='–í—Ä–µ–º—è –≤—ã—à–ª–æ!\n'
                                        f'{CONFIGTEXT.MAIN_FORM.TEXT}',
                                   reply_markup=await Rub.start_MainForm_ikb(chat_id))

    @staticmethod
    async def buying_currency(money: int, currency: str, limit: int, message: types.Message, state):
        """
        –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã BYN –∏–ª–∏ RUB
        :param money: –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥
        :param currency: –≤–∞–ª—é—Ç–∞ BYN –∏–ª–∏ RUB
        :param limit: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥ –¥–ª—è –≤–≤–æ–¥–∞
        :param message: message: Message
        :param state: state: FSMContext
        :return:
        """

        user_money: int = int(money)
        if user_money < limit:
            await message.answer(text=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ {limit} {currency}\n"
                                      f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency}")
            await RubState.UserCoin.set()
        else:
            price_BTC: float = await Cryptocurrency.get_btc()
            bye: float = round(int(user_money) / price_BTC, 8)

            currency = await CRUDCurrency.get(currency_name=currency)

            percent = round((Decimal(bye) / Decimal(100) * Decimal(CONFIG.COMMISSION.COMMISSION_BOT)), 8)
            percent_referral = round((Decimal(bye) / Decimal(100) * Decimal(CONFIG.COMMISSION.COMMISSION_REFERRAL)), 8)

            get_referral = await CRUDReferral.get(referral_id=message.from_user.id)

            if get_referral:
                await state.update_data(percent_referral=percent_referral)
                await state.update_data(referral_id=get_referral.user_id)  # –°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç —Å—É–º–º—ã
                current_bye = round(Decimal(bye) - Decimal(percent) - Decimal(percent_referral), 8)
                referral_txt = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC: {current_bye}\n" \
                               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–ü–ï–†–ï–ô–¢–ò –ö –û–ü–õ–ê–¢–ï?"
            else:
                current_bye = round(Decimal(bye) - Decimal(percent), 8)
                referral_txt = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC: {current_bye}\n" \
                               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–ü–ï–†–ï–ô–¢–ò –ö –û–ü–õ–ê–¢–ï?"
            # f"{CONFIG.COMMISSION.COMMISSION_BOT}% –æ—Ç {bye} —Å–æ—Å—Ç–∞–≤–∏—Ç = {percent} BTC\n"
            text = f"üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: BTC –∑–∞ {currency.name}\n" \
                   f"1 Bitcoin = {round(price_BTC)} {currency.name}\n\n" \
                   f"üì¢ –í–Ω–∏–º–∞–Ω–∏–µ!\n" \
                   f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n" \
                   f"–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –ö—É–ø–∏—Ç—å ‚úÖ " \
                   f"–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ ‚è±{CONFIG.PAYMENT_TIMER / 60} –º–∏–Ω—É—Ç!\n\n" \
                   f"–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞–ø–ª–∞—Ç–∏—Ç—å {user_money} {currency.name}\n" \
                   f"{referral_txt}\n"

            await message.answer(text=text,
                                 reply_markup=await Rub.bue_ikb(
                                     user_id=message.from_user.id,
                                     count=bye,
                                     target="MainForm")
                                 )

            await state.update_data(currency_id=currency.id)  # –í–∞–ª—é—Ç–∞
            await state.update_data(sale=user_money)  # –°–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç –í BYN
            await state.update_data(exchange_rate=price_BTC)  # –ö—É—Ä—Å BTC
            await state.update_data(buy_BTC=current_bye)  # –°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤ BTC
            await state.update_data(percent=percent)  # –°–∫–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç —Å—É–º–º—ã

            await asyncio.sleep(int(CONFIG.PAYMENT_TIMER))
            await Rub.send_timer_message(chat_id=message.from_user.id, state=state)

    @staticmethod
    async def bue_ikb(user_id: int, target: str, count: float) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param count: –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å ‚úÖ",
                                         callback_data=rub_cb.new("BuyRUB", "SelectUserWalletBitcoin", count, user_id))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=rub_cb.new(target, "get_MainForm", 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def CheckOut_wallet_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ—à–µ–ª–µ–∫, —Å–ø—Ä–æ—Å–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–í–µ—Ä–Ω–æ üëå", callback_data=rub_cb.new("BuyRUB", "get_requisites", 0, 0)),
                    InlineKeyboardButton(text="–ù–µ—Ç ‚õîÔ∏è", callback_data=rub_cb.new("MainForm", "get_MainForm", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def user_paid_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–Ø –û–ü–õ–ê–¢–ò–õ ‚úÖ", callback_data=rub_cb.new("UserPaid", 0, 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=rub_cb.new("MainForm", "get_MainForm", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def confirmation_timer(message):
        await asyncio.sleep(10)
        await message.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç "
                                  "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º.\n\n"
                                  "–ï—Å–ª–∏ –≤–∞–º –Ω–µ —Å–æ–æ–±—â–∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. "
                                  "–û–Ω –±—ã—Å—Ç—Ä–æ –≤—Å–µ —Ä–µ—à–∏—Ç.\n\n"
                                  "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ü§ó‚úåÔ∏è\n\n"
                                  "üöÄ –ñ–µ–ª–∞–µ–º –í–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!")

    @staticmethod
    @logger.catch
    async def process_rub(callback: CallbackQuery = None, message: Message = None, state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith('rub'):
                data = rub_cb.parse(callback_data=callback.data)

                if data.get("target") == "MainForm":
                    if data.get("action") == "get_MainForm":
                        await state.finish()
                        await callback.message.delete()
                        await callback.message.answer(text=CONFIGTEXT.MAIN_FORM.TEXT,
                                                      reply_markup=await Rub.start_MainForm_ikb(
                                                          user_id=callback.from_user.id)
                                                      )

                elif data.get("target") == "Pay":
                    if data.get("action") == "EnterAmount":
                        rub = await Cryptocurrency.get_rub()
                        btc: float = await Cryptocurrency.get_btc()

                        price = round(Decimal(rub) * Decimal(btc))
                        text: str = "–ö—É–ø–∏—Ç—å BTC –∑–∞ RUB üá∑üá∫\n" \
                                    f"1 Bitcoin ‚Çø = {price} RUB üá∑üá∫\n\n" \
                                    f"<i>–ú–∏–Ω. —Å—É–º–º–∞ {CONFIG.COMMISSION.MIN_RUB}  RUB</i>"

                        await callback.message.edit_text(text=f"{text}\n\n"
                                                              f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ RUB üá∑üá∫:",
                                                         reply_markup=await Rub.back_ikb(
                                                             action="get_MainForm",
                                                             user_id=callback.from_user.id,
                                                             target="MainForm"),
                                                         disable_web_page_preview=True
                                                     )
                        await RubState.UserCoin.set()

                elif data.get('target') == "BuyRUB":
                    if data.get("action") == "SelectUserWalletBitcoin":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        get_wallet = await CRUDWallet.get(user_id=user.id)
                        check_wallet = await Cryptocurrency.Check_Wallet(btc_address=get_wallet.address)

                        if check_wallet:
                            try:
                                get_data_buy = await state.get_data()

                                text = f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º BTC {get_data_buy['buy_BTC']} ‚û°Ô∏è‚û°Ô∏è‚û°\n\n" \
                                       f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {get_wallet.address}\n" \
                                       f"–î–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –∫–æ—à–µ–ª—å–∫—É –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ\n\n" \
                                       f"‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í—Å—ë –≤–µ—Ä–Ω–æ?\n" \
                                       f"–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É " \
                                       f"–ù–µ—Ç ‚õîÔ∏è, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.Ô∏è"

                                await state.update_data(wallet=get_wallet.address)
                                await callback.message.edit_text(text=text,
                                                                 reply_markup=await Rub.CheckOut_wallet_ikb())
                            except KeyError as e:
                                print(e)
                                await callback.message.edit_text(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                                 reply_markup=await Rub.start_MainForm_ikb(
                                                                     user_id=callback.from_user.id)
                                                                 )
                                await state.finish()
                                await callback.message.delete()

                        else:
                            await callback.message.edit_text(text=f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ <i>{get_wallet.address}</i> "
                                                                  f"–Ω–µ—Ç—É –≤ blockchain\n",
                                                             reply_markup=await Rub.back_ikb(
                                                                 action="get_MainForm",
                                                                 user_id=callback.from_user.id,
                                                                 target="MainForm"),
                                                             parse_mode="HTML"
                                                             )

                    elif data.get('action') == "get_requisites":
                        try:
                            wallet = await state.get_data()

                            text_wallet = f"üöÄ –ù–∞ –í–∞—à –∫–æ—à–µ–ª–µ–∫  ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è <i>{wallet['wallet']}</i>\n" \
                                          f"–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <i>{wallet['buy_BTC']}</i> BTC. üöÄ"

                            await callback.message.edit_text(text=f"{text_wallet}\n\n"
                                                                  f"{CONFIGTEXT.RequisitesRUS.TEXT}",
                                                             reply_markup=await Rub.user_paid_ikb(),
                                                             parse_mode="HTML"
                                                             )
                        except Exception as e:
                            print(e)
                            await callback.message.delete()
                            await state.finish()
                            await callback.message.edit_text(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                             reply_markup=await Rub.start_MainForm_ikb(
                                                                 user_id=callback.from_user.id)
                                                             )

                elif data.get('target') == "UserPaid":
                    await callback.message.edit_text(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É!\n"
                                                          "(–¥–æ 2 –ú–±)")
                    await RubState.UserPhoto.set()

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                # –í–≤–æ–¥ –∫–æ—à–µ–ª—å–∫–∞
                if await state.get_state() == "RubState:UserCoin":
                    money = message.text.isdigit()
                    if money:
                        await Rub.buying_currency(money=message.text,
                                                  currency="RUB",
                                                  limit=CONFIG.COMMISSION.MIN_BYN,
                                                  message=message,
                                                  state=state)

                    else:
                        await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                                                  "–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä –∏–ª–∏ —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª!")
                        await RubState.UserCoin.set()

                elif await state.get_state() == "RubState:UserPhoto":
                    if message.content_type == "photo":
                        if message.photo[0].file_size > 2000:
                            await message.answer(text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 –º–±\n"
                                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑")
                            await RubState.UserPhoto.set()
                        else:
                            get_photo = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
                            photo = message.photo[0].file_id
                            get_data = await state.get_data()
                            user = await CRUDUsers.get(user_id=message.from_user.id)

                            transaction = await CRUDTransaction.add(transaction=TransactionSchema(user_id=user.id,
                                                                                                  operation_id=1,
                                                                                                  **get_data)
                                                                    )
                            #  –ï—Å–ª–∏ –æ–±–º–µ–Ω —Å–æ–≤–µ—Ä—à–∏–ª —Ä–µ—Ñ–µ—Ä–∞–ª —Ç–æ –µ–º—É –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                            #  –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–æ—à–µ–ª–µ–∫
                            if "percent_referral" in get_data:
                                referral_id = await CRUDUsers.get(id=int(get_data['referral_id']))
                                await CRUDTransactionReferrals.add(transaction_referral=TransactionsReferralSchema(
                                    transaction_id=transaction.id,
                                    user_id=message.from_user.id,
                                    referral_id=referral_id.user_id,
                                    percent=float(get_data['percent_referral'])
                                ))
                                await bot.send_message(chat_id=referral_id.user_id,
                                                       text=f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {message.from_user.id} —Å–æ–≤–µ—Ä—à–∏–ª –æ–±–º–µ–Ω\n"
                                                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–æ—Ü–µ–Ω—Ç - {get_data['percent_referral']}")

                            try:
                                await bot.download_file(file_path=get_photo.file_path,
                                                        destination=f'user_check/{transaction.id}_{message.from_user.id}.jpg',
                                                        timeout=12,
                                                        chunk_size=1215000)

                                get_transaction = await CRUDTransaction.get(transaction=transaction.id)
                                get_transaction.check = f'{transaction.id}_{message.from_user.id}'
                                await CRUDTransaction.update(transaction=get_transaction)

                                text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {transaction.id}\n\n" \
                                       f"–ò–º—è {message.from_user.first_name}\n" \
                                       f"–ö—É—Ä—Å: {round(get_data['exchange_rate'])}\n" \
                                       f"–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Å—É–º–º—ã {get_data['percent']}\n" \
                                       f"–ü–æ–ª—É—á–µ–Ω–æ RUB: {get_data['sale']}\n" \
                                       f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å  BTC: {get_data['buy_BTC']}\n" \
                                       f"–ö–æ—à–µ–ª—ë–∫: {get_data['wallet']}"

                                tasks = []
                                for admin in CONFIG.BOT.ADMINS:
                                    tasks.append(bot.send_photo(chat_id=admin, photo=photo,
                                                                caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª!\n\n"
                                                                        f"{text}"))
                                await asyncio.gather(*tasks, return_exceptions=True)  # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —Å—Ä–∞–∑—É

                                await Rub.confirmation_timer(message=message)

                                user.transaction_timer = True
                                await CRUDUsers.update(user=user)

                            except Exception as e:
                                print(e)
                                await message.answer(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                     reply_markup=await Rub.start_MainForm_ikb(
                                                         user_id=message.from_user.id)
                                                     )
                            await state.finish()
                    else:
                        await message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
                        await RubState.UserPhoto.set()