from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BadRequest

from config import CONFIG
from crud import CRUDUsers
from handlers.users.Cryptocurrency import Cryptocurrency
from loader import bot
from states.users.MainState import MainState

main_cb = CallbackData("main", "target", "action", "id", "editId")


class MainForm:
    @staticmethod
    async def back_ikb(user_id: int, target: str) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, 0, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def proof_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–û–î–¢–í–ï–†–î–ò–¢–¨ üëçüèª", callback_data=main_cb.new("MainForm", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def user_paid_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–Ø –û–ü–õ–ê–¢–ò–õ ‚úÖ", callback_data=main_cb.new("UserPaid", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def CheckOut_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ—à–µ–ª–µ–∫, —Å–ø—Ä–æ—Å–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–î–∞ üëå", callback_data=main_cb.new("Buy", 0, 0, 0)),
                    InlineKeyboardButton(text="–ù–µ—Ç üëé", callback_data=main_cb.new("MainForm", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def money_ikb(user_id: int, target: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤–∞–ª—é—Ç—ã
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        data = {"50 BYN": {"target": "Pay", "action": "get_pay", "id": "50", "editid": user_id},
                "100 BYN": {"target": "Pay", "action": "get_pay", "id": "100", "editid": user_id},
                "200 BYN": {"target": "Pay", "action": "get_pay", "id": "200", "editid": user_id},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=main_cb.new(items["target"],
                                                                              items["action"],
                                                                              items["id"],
                                                                              items["editid"]))
                    for name, items in data.items()
                ],
                [
                    InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É", callback_data=main_cb.new("Pay",
                                                                                           "EnterAmount", 0, user_id))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, 0, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def bue_ikb(user_id: int, target: str, count: float) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param count: –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å ‚úÖ", callback_data=main_cb.new("Buy", 0, count, user_id))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, 0, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def wallet_ikb(user_id: int, target: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ BTC –∫–æ—à–µ–ª—å–∫–∞
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –∫–æ—à–µ–ª–µ–∫", callback_data=main_cb.new("WalletEnter",
                                                                                          0, 0, user_id))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, 0, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def start_ikb(user_id: int) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """
        data = {"üí≥ –ö—É–ø–∏—Ç—å BTC": {"target": "BuyBTC", "action": "get_BuyBTC", "id": 0, "editid": user_id},
                "üí≥ –ü—Ä–æ–¥–∞—Ç—å BTC": {"target": "SellBTC", "action": "get_SellBTC", "id": 0, "editid": user_id},
                "üíª –ü—Ä–æ—Ñ–∏–ª—å": {"target": "Profile", "action": "get_Profile", "id": 0, "editid": user_id},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=main_cb.new(name_items["target"],
                                                                              name_items["action"],
                                                                              name_items["id"],
                                                                              name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def process_profile(callback: CallbackQuery = None, message: Message = None,
                              state: FSMContext = None) -> None:

        if callback:
            if callback.data.startswith('main'):
                data = main_cb.parse(callback_data=callback.data)

                if data.get("target") == "MainForm":
                    await callback.message.edit_text(text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å\n"
                                                          "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é",
                                                     reply_markup=await MainForm.start_ikb(
                                                         user_id=callback.from_user.id)
                                                     )

                elif data.get("target") == "Profile":
                    user = await CRUDUsers.get(user_id=callback.from_user.id)
                    text = f"–ü—Ä–æ—Ñ–∏–ª—å\n\n" \
                           f"–†–µ–≥–∏—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ - {user.date_created.strftime('%Y.%m.%d')}\n" \
                           f"–°–æ–≤–µ—Ä—à–µ–Ω–æ —Å–¥–µ–ª–æ–∫ - {user.transactions}"
                    await callback.message.edit_text(text=text,
                                                     reply_markup=await MainForm.back_ikb(user_id=callback.from_user.id,
                                                                                          target="MainForm")
                                                     )

                elif data.get("target") == "BuyBTC":
                    price = await Cryptocurrency.get_Cryptocurrency()

                    text = "üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: BTC –∑–∞ BYN\n"\
                           f"1 Bitcoin = {price} BYN\n\n"\
                           f"<i>–ú–∏–Ω. —Å—É–º–º–∞: 50.0 BYN</i>"

                    await callback.message.edit_text(text=text,
                                                     reply_markup=await MainForm.money_ikb(
                                                         user_id=callback.from_user.id,
                                                         target="MainForm"),
                                                     parse_mode="HTML"
                                                     )

                elif data.get("target") == "Pay":
                    if data.get("action") == "get_pay":
                        price_BYN = int(data.get("id"))
                        price_BTC = await Cryptocurrency.get_Cryptocurrency()
                        bye = round(price_BYN / price_BTC, 8)

                        text = "üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: BTC –∑–∞ BYN\n"\
                               f"1 Bitcoin = {price_BTC}\n\n" \
                               f"üì¢ –í–Ω–∏–º–∞–Ω–∏–µ!\n" \
                               f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n" \
                               f"–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –ö—É–ø–∏—Ç—å ‚úÖ " \
                               f"–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ ‚è±60 –º–∏–Ω—É—Ç!\n\n"\
                               f"{price_BYN} BYN = {bye} BTC"

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForm.bue_ikb(
                                                             user_id=callback.from_user.id,
                                                             count=bye,
                                                             target="BuyBTC")
                                                         )

                    elif data.get("action") == "EnterAmount":
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ BYN:",
                                                         reply_markup=await MainForm.back_ikb(
                                                             user_id=callback.from_user.id,
                                                             target="BuyBTC")
                                                         )
                        await MainState.UserCoin.set()

                elif data.get("target") == "Buy":
                    bye = float(data.get("id"))
                    await callback.message.edit_text(text="üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å Bitcoin - –∫–æ—à–µ–ª—å–∫–∞ üîê:\n\n"
                                                          f"–ü–æ–∫—É–ø–∫–∞ - {bye} BTC",
                                                     reply_markup=await MainForm.back_ikb(
                                                         user_id=callback.from_user.id,
                                                         target="BuyBTC")
                                                     )
                    await MainState.Wallet.set()

                elif data.get("target") == "UserPaid":
                    await callback.message.edit_text(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É!\n"
                                                          "(–¥–æ 2 –ú–±)")
                    await MainState.UserPhoto.set()

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                if await state.get_state() == "MainState:Wallet":
                    wallet = await Cryptocurrency.Check_Wallet(btc_address=message.text)
                    if wallet:
                        text = "üßæ–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´\n" \
                               "        üèßüí≥üíµ\n" \
                               "- –°–ò–°–¢–ï–ú–ê –ï–†–ò–ü –ü–õ–ê–¢–ï–ñ–ò\n" \
                               "1. –ï–†–ò–ü\n" \
                               "2. –ë–ê–ù–ö–û–í–°–ö–ò–ï –§–ò–ù–ê–ù–°–û–í–´–ï \n" \
                               "–£–°–õ–£–ì–ò\n" \
                               "3. –ë–ê–ù–ö –ù–ö–§–û\n" \
                               "4. –ú–¢–ë–ê–ù–ö\n" \
                               "5. –ü–û–ü–û–õ–ù–ï–ù–ò–ï –î–ï–ë–ï–¢–û–í–û–ô –ö–ê–†–¢–´\n" \
                               "6. –†/–°–ß–Å–¢       32271867\n" \
                               "7. –ü–û–°–õ–ï –ü–ï–†–ï–í–û–î–ê –°–†–ï–î–°–¢–í \n" \
                               "–ù–ê–ñ–ò–ú–ê–ï–ú –ö–ù–û–ü–ö–£ \n" \
                               "üèßüèßüèß–Ø –û–ø–ª–∞—Ç–∏–ª üèßüèßüèß\n" \
                               "8. –ü–†–ò–°–´–õ–ê–ï–ú –ß–ï–ö \n" \
                               "9. üßæüßæ  –ß–ï–ö –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù üßæüßæ\n"

                        await message.answer(text=f"–í—ã –≤–≤–µ–ª–∏ –∫–æ—à–µ–ª–µ–∫ <i>{message.text}</i>\n\n"
                                                  f"{text}",
                                             reply_markup=await MainForm.user_paid_ikb(),
                                             parse_mode="HTML"
                                             )
                    else:
                        await message.answer(text=f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ <i>{message.text}</i> –Ω–µ—Ç—É –≤ blockchain\n\n"
                                                  f"–ñ–µ–ª–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –≤–∞—à –∞–¥—Ä–µ—Å Bitcoin - –∫–æ—à–µ–ª—å–∫–∞",
                                             reply_markup=await MainForm.CheckOut_ikb(),
                                             parse_mode="HTML"
                                             )

                elif await state.get_state() == "MainState:UserPhoto":
                    if message.content_type == "photo":
                        if message.photo[0].file_size > 2000:
                            await message.answer(text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 –º–±\n"
                                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑")
                            await MainState.UserPhoto.set()
                        else:
                            photo = message.photo[0].file_id
                            for admin in CONFIG.BOT.ADMINS:
                                await bot.send_photo(chat_id=admin, photo=photo,
                                                     caption="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª!")

                            await message.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç "
                                                      "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º.\n\n"
                                                      "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ü§ó‚úåÔ∏è\n\n"
                                                      "üöÄ –ñ–µ–ª–∞–µ–º –í–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!")
                            await state.finish()
                    else:
                        await message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
                        await MainState.UserPhoto.set()

                elif await state.get_state() == "MainState:UserCoin":
                    money = message.text.isdigit()
                    if money:
                        user_money = int(message.text)
                        if user_money < 50:
                            await message.answer(text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ 50 BYN\n"
                                                      "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ BYN")
                            await MainState.UserCoin.set()
                        else:
                            price_BTC = await Cryptocurrency.get_Cryptocurrency()
                            bye = round(int(user_money) / price_BTC, 8)
                            text = "üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: BTC –∑–∞ BYN\n" \
                                   f"1 Bitcoin = {price_BTC}\n\n" \
                                   f"üì¢ –í–Ω–∏–º–∞–Ω–∏–µ!\n" \
                                   f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n" \
                                   f"–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –ö—É–ø–∏—Ç—å ‚úÖ " \
                                   f"–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ ‚è±60 –º–∏–Ω—É—Ç!\n\n" \
                                   f"{user_money} BYN = {bye} BTC"

                            await message.answer(text=text,
                                                 reply_markup=await MainForm.bue_ikb(
                                                     user_id=message.from_user.id,
                                                     count=bye,
                                                     target="BuyBTC")
                                                 )
                    else:
                        await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                                                  "–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä")
                        await MainState.UserCoin.set()
