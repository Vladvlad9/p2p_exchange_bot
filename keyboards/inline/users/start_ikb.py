import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BadRequest
from aiogram.utils import exceptions

from config import CONFIG
from crud import CRUDUsers, CRUDTransaction, CRUDCurrency
from crud.referralCRUD import CRUDReferral
from crud.walCRUD import CRUDWallet
from handlers.users.CreateWallet import CreateWallet
from handlers.users.Cryptocurrency import Cryptocurrency
from loader import bot
from schemas import TransactionSchema, WalletSchema
from states.users.MainState import MainState

from decimal import Decimal
from states.users.TransferMoneyState import TransferMoneyState

main_cb = CallbackData("main", "target", "action", "id", "editId")


class MainForm:

    @staticmethod
    async def send_timer_message(chat_id: int, state):
        await state.finish()
        await bot.send_message(chat_id=chat_id,
                               text='–í—Ä–µ–º—è –≤—ã—à–ª–æ!\n'
                                    "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                                    "1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å\n"
                                    "2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ –°–æ–æ–±—â–µ–Ω–∏–∏) \n"
                                    "3. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É  –û–ü–õ–ê–¢–ò–¢–¨‚úÖ \n"
                                    "4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ø –û–ü–õ–ê–¢–ò–õ‚úÖ\n"
                                    "5. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É\n"
                                    "6. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å bitcoin –∫–æ—à–µ–ª—å–∫–∞ (–≤ –°–æ–æ–±—â–µ–Ω–∏–∏)\n"
                                    "7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏—Ö\n"
                                    "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å:",
                               reply_markup=await MainForm.start_ikb(chat_id))

    @staticmethod
    async def isfloat(value: str):
        try:
            float(value)
            return True
        except ValueError:
            return False

    @staticmethod
    async def buying_currency(money: int, currency: str, limit: int, message: types.Message, state):
        """
        –§—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã BYN –∏–ª–∏ RUB
        :param money: –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–Ω–µ–≥
        :param currency: –≤–∞–ª—é—Ç–∞ BYN –∏–ª–∏ RUB
        :param limit: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥ –¥–ª—è –≤–≤–æ–¥–∞
        :param message: message: Message
        :param state: state: FSMContext
        :return:
        """

        user_money = int(money)
        if user_money < limit:
            await message.answer(text=f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ {limit} {currency}\n"
                                      f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency}")
            await MainState.UserCoin.set()
        else:
            price_BTC = await Cryptocurrency.get_Cryptocurrency(currency)
            bye = round(int(user_money) / price_BTC, 8)

            currency = await CRUDCurrency.get(currency_name=currency)

            percent = round((Decimal(bye) / Decimal(100) * CONFIG.COMMISSION.COMMISSION_BOT), 8)
            percent_referral = round((Decimal(bye) / Decimal(100) * CONFIG.COMMISSION.COMMISSION_REFERRAL), 8)

            get_referral = await CRUDReferral.get(referral_id=message.from_user.id)

            if get_referral:
                current_bye = round(Decimal(bye) - Decimal(percent) - Decimal(percent_referral), 8)
                referral_txt = f"{CONFIG.COMMISSION.COMMISSION_REFERRAL}% –æ—Ç {bye} —Å–æ—Å—Ç–∞–≤–∏—Ç = {percent_referral} BTC\n" \
                               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC: {current_bye}\n" \
                               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–ü–ï–†–ï–ô–¢–ò –ö –û–ü–õ–ê–¢–ï?"
            else:
                current_bye = round(Decimal(bye) - Decimal(percent), 8)
                referral_txt = f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC: {current_bye}\n" \
                               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–ü–ï–†–ï–ô–¢–ò –ö –û–ü–õ–ê–¢–ï?"

            text = f"üí≥ –ö—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É: BTC –∑–∞ {currency.name}\n" \
                   f"1 Bitcoin = {price_BTC} {currency.name}\n\n" \
                   f"üì¢ –í–Ω–∏–º–∞–Ω–∏–µ!\n" \
                   f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n" \
                   f"–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –ö—É–ø–∏—Ç—å ‚úÖ " \
                   f"–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ ‚è±{CONFIG.PAYMENT_TIMER / 60} –º–∏–Ω—É—Ç!\n\n" \
                   f"{user_money} {currency.name} = {bye} BTC\n" \
                   f"{CONFIG.COMMISSION.COMMISSION_BOT}% –æ—Ç {bye} —Å–æ—Å—Ç–∞–≤–∏—Ç = {percent} BTC\n" \
                   f"{referral_txt}\n" \

            await message.answer(text=text,
                                 reply_markup=await MainForm.bue_ikb(
                                     user_id=message.from_user.id,
                                     count=bye,
                                     target="BuyBTC")
                                 )

            await state.update_data(currency_id=currency.id)
            await state.update_data(sale=user_money)
            await state.update_data(exchange_rate=price_BTC)
            await state.update_data(buy_BTC=current_bye)

            await asyncio.sleep(int(CONFIG.PAYMENT_TIMER))
            await MainForm.send_timer_message(chat_id=message.from_user.id, state=state)

    @staticmethod
    async def buying_BTC(user_money, message, state):
        price_BYN = await Cryptocurrency.get_CryptocurrencyBTC(currency="BYN")
        price_RUB = await Cryptocurrency.get_CryptocurrencyBTC(currency="RUB")
        price_BTC = await Cryptocurrency.get_Cryptocurrency(currency="USD")

        bye_byn = round(Decimal(user_money) * Decimal(price_BYN), 8)
        bye_rub = round(Decimal(user_money) * Decimal(price_RUB), 8)

        text = f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ Bitcoin: {price_BTC}$\n" \
               f"üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n" \
               f"–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –û–ü–õ–ê–¢–ò–¢–¨‚úÖ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ " \
               f"–æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ ‚è±{CONFIG.PAYMENT_TIMER / 60} –º–∏–Ω—É—Ç!\n\n" \
               f"üßæ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: üáßüáæ {bye_byn} BYN\n\n" \
               f"üßæ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: üá∑üá∫ {bye_rub} RUB\n\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC: {user_money}\n" \
               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
               f"–ü–ï–†–ï–ô–¢–ò –ö –û–ü–õ–ê–¢–ï?"

        await state.update_data(exchange_RUB=bye_rub)
        await state.update_data(exchange_BYN=bye_byn)

        await state.update_data(price_RUB=bye_rub)
        await state.update_data(price_BYN=bye_byn)

        await state.update_data(buy_BTC=user_money)

        await message.answer(text=text,
                             reply_markup=await MainForm.currency_ikb(
                                 user_id=message.from_user.id,
                                 target="get_MainForm",
                                 actionBack="MainForm")
                             )

    @staticmethod
    async def next_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–º–Ω–∏–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É –∏ –ø–µ—Ä–µ—à–µ–ª –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è", callback_data=main_cb.new("Profile", "get_NextWallet",
                                                                                         0, 0)
                                         )
                ]
            ]
        )

    @staticmethod
    async def back_ikb(user_id: int, target: str, page: int = 0, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param page: –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, action, page, user_id))
                ]
            ]
        )

    @staticmethod
    async def proof_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–û–î–¢–í–ï–†–î–ò–¢–¨ üëçüèª",
                                         callback_data=main_cb.new("Profile", "get_NextWallet", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def user_paid_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–Ø –û–ü–õ–ê–¢–ò–õ ‚úÖ", callback_data=main_cb.new("UserPaid", 0, 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Buy", "get_reenter", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def CheckOut_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ—à–µ–ª–µ–∫, —Å–ø—Ä–æ—Å–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–î–∞ üëå", callback_data=main_cb.new("Buy", 0, 0, 0)),
                    InlineKeyboardButton(text="–ù–µ—Ç üëé", callback_data=main_cb.new("MainForm", 0, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def CheckOut_wallet_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ—à–µ–ª–µ–∫, —Å–ø—Ä–æ—Å–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–í–µ—Ä–Ω–æ üëå", callback_data=main_cb.new("Buy", "get_requisites", 0, 0)),
                    InlineKeyboardButton(text="–ù–µ—Ç ‚õîÔ∏è", callback_data=main_cb.new("Buy", "get_reenter", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def get_currency_ikb(user_id: int, target: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤–∞–ª—é—Ç—ã
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É", callback_data=main_cb.new("Pay",
                                                                                           "EnterAmount", 0, user_id))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, 0, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def currency_ikb(user_id: int, target: str, actionBack: str) -> InlineKeyboardMarkup:
        """
                –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤–∞–ª—é—Ç—ã
                :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
                :return:
                """
        data = {
            "–û–ü–õ–ê–¢–ò–¢–¨ BYN üáßüáæ": {"target": "Pay", "action": "get_Currency", "id": "BYN", "editid": user_id},
            "–û–ü–õ–ê–¢–ò–¢–¨ RUB üá∑üá∫": {"target": "Pay", "action": "get_Currency", "id": "RUB", "editid": user_id},
        }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=main_cb.new(name_items["target"],
                                                                              name_items["action"],
                                                                              name_items["id"],
                                                                              name_items["editid"]))
                    for name, name_items in data.items()
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, actionBack, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def money_entry_ikb(user_id: int, target: str, currency: str) -> InlineKeyboardMarkup:
        """
                –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤–∞–ª—é—Ç—ã
                :param currency:
                :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
                :return:
                """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å—É–º–º—É", callback_data=main_cb.new("Pay",
                                                                                           "EnterAmount", currency,
                                                                                           user_id)
                                         )
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, 0, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def bue_ikb(user_id: int, target: str, count: float) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param count: –°–∫–æ–ª—å–∫–æ –º–æ–Ω–µ—Ç —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å ‚úÖ", callback_data=main_cb.new("Buy", "get_buy", count, user_id))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, 0, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def wallet_ikb(user_id: int, target: str, action: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ BTC –∫–æ—à–µ–ª—å–∫–∞
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–∏–π –∫–æ—à–µ–ª–µ–∫",
                                         callback_data=main_cb.new("Buy",
                                                                   action, 0, user_id))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, 0, 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def wallet_user_ikb(user_id: int,
                              target: str, action_back: str, wallet_exists: bool) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ BTC –∫–æ—à–µ–ª—å–∫–∞
        :param target:
        :param wallet_exists: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–≤–æ–¥–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥,
        –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞—Ç—å
        :param action_back: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """

        data = {
            "‚ûï –°–æ–∑–¥–∞—Ç—å": {"target": "Profile", "action": "get_createWallet", "id": 0, "editid": user_id},
            "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": target, "action": action_back, "id": 0, "editid": user_id},
        }

        if wallet_exists:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üì§ –í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏",
                                             callback_data=main_cb.new("Profile", "money_transfer", 0, user_id)
                                             ),
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, action_back,
                                                                                        0, user_id)
                                             )
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text=name, callback_data=main_cb.new(name_items["target_back"],
                                                                              name_items["action"],
                                                                              name_items["id"],
                                                                              name_items["editid"])
                                             )
                    ] for name, name_items in data.items()
                ]
            )

    @staticmethod
    async def start_ikb(user_id: int) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """
        data = {
            "BYN üáßüáæ": {"target": "Pay", "action": "EnterAmount", "id": "BYN", "editid": user_id},
            "RUB üá∑üá∫": {"target": "Pay", "action": "EnterAmount", "id": "RUB", "editid": user_id},
            "BTC ‚Çø": {"target": "Pay", "action": "get_SellBTC", "id": 0, "editid": user_id},
        }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üíª –ü—Ä–æ—Ñ–∏–ª—å",
                                         callback_data=main_cb.new("Profile", "get_Profile", 0, user_id))
                ]
            ] + [
                [
                    InlineKeyboardButton(text=name, callback_data=main_cb.new(name_items["target"],
                                                                              name_items["action"],
                                                                              name_items["id"],
                                                                              name_items["editid"]))
                    for name, name_items in data.items()
                ]
            ]
        )

    @staticmethod
    async def profile_ikb(user_id: int, target: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        data = {"ü§ù –°–¥–µ–ª–∫–∏": {"target": "Profile", "action": "get_transaction", "id": 0, "editid": user_id},
                "üë®‚Äçüë¶‚Äçüë¶ –†–µ—Ñ–µ—Ä–∞–ª—ã": {"target": "Profile", "action": "get_referrals", "id": 0, "editid": user_id},
                "üëõ –ö–æ—à–µ–ª–µ–∫": {"target": "Profile", "action": "get_userWallet", "id": 0, "editid": user_id},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": target, "action": "get_MainForm", "id": 0, "editid": user_id}
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=main_cb.new(name_items["target"],
                                                                              name_items["action"],
                                                                              name_items["id"],
                                                                              name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def pagination_transaction_ikb(target: str,
                                         user_id: int,
                                         action: str = None,
                                         page: int = 0) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target:  –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        :return:
        """
        orders = await CRUDTransaction.get_all(user_id=user_id)

        orders_count = len(orders)

        prev_page: int
        next_page: int

        if page == 0:
            prev_page = orders_count - 1
            next_page = page + 1
        elif page == orders_count - 1:
            prev_page = page - 1
            next_page = 0
        else:
            prev_page = page - 1
            next_page = page + 1

        back_ikb = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Profile", "get_Profile", 0, 0))
        prev_page_ikb = InlineKeyboardButton("‚Üê", callback_data=main_cb.new(target, action, prev_page, 0))
        check = InlineKeyboardButton("üßæ –ß–µ–∫", callback_data=main_cb.new("Profile", "get_check", page, 0))
        page = InlineKeyboardButton(f"{str(page + 1)}/{str(orders_count)}",
                                    callback_data=main_cb.new("", "", 0, 0))
        next_page_ikb = InlineKeyboardButton("‚Üí", callback_data=main_cb.new(target, action, next_page, 0))

        if orders_count == 1:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        check
                    ],
                    [
                        back_ikb
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        prev_page_ikb,
                        page, check,
                        next_page_ikb,
                    ],
                    [
                        back_ikb
                    ]
                ]
            )

    @staticmethod
    async def money_transfer_ikb(user_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–∏—Ç—å",
                                         callback_data=main_cb.new("Profile", "approved_trans_money", user_id, 0)),
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Profile", "get_userWallet", user_id, 0))
                ]
            ]
        )

    @staticmethod
    async def process_profile(callback: CallbackQuery = None, message: Message = None,
                              state: FSMContext = None) -> None:

        if callback:
            if callback.data.startswith('main'):
                data = main_cb.parse(callback_data=callback.data)
                # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                if data.get("target") == "MainForm":
                    if data.get("action") == "get_MainForm":
                        await callback.message.delete()
                        await callback.message.answer(text="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                                                           "1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å\n"
                                                           "2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ –°–æ–æ–±—â–µ–Ω–∏–∏) \n"
                                                           "3. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É  –û–ü–õ–ê–¢–ò–¢–¨‚úÖ \n"
                                                           "4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ø –û–ü–õ–ê–¢–ò–õ‚úÖ\n"
                                                           "5. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É\n"
                                                           "6. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å bitcoin –∫–æ—à–µ–ª—å–∫–∞ (–≤ –°–æ–æ–±—â–µ–Ω–∏–∏)\n"
                                                           "7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏—Ö\n"
                                                           "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å:",
                                                      reply_markup=await MainForm.start_ikb(
                                                          user_id=callback.from_user.id)
                                                      )

                # –ü—Ä–æ—Ñ–∏–ª—å
                elif data.get("target") == "Profile":
                    if data.get("action") == "get_Profile":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        transaction = await CRUDTransaction.get_all(user_id=user.id)

                        text = f"–ü—Ä–æ—Ñ–∏–ª—å\n\n" \
                               f"–†–µ–≥–∏—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ - {user.date_created.strftime('%Y.%m.%d')}\n" \
                               f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ - {len(transaction)}\n\n" \
                               f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n" \
                               f"<code>{CONFIG.BOT.BOT_LINK}?start={callback.from_user.id}</code>"
                        await callback.message.delete()
                        await callback.message.answer(text=text,
                                                      reply_markup=await MainForm.profile_ikb(
                                                          user_id=callback.from_user.id,
                                                          target="MainForm"),
                                                      parse_mode="HTML"
                                                      )

                    elif data.get("action") == "get_transaction":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        transaction = await CRUDTransaction.get_all(user_id=user.id)

                        if transaction:
                            currency = await CRUDCurrency.get(currency_id=transaction[0].currency_id)
                            approved = "‚úÖ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ" if transaction[0].approved else "‚ùå –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚ùå"

                            text = f"ü§ù –°–¥–µ–ª–∫–∞ ‚Ññ {transaction[0].id} {approved}\n\n" \
                                   f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction[0].exchange_rate}\n</i>" \
                                   f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction[0].buy_BTC}\n</i>" \
                                   f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ {currency.name}: <i>{transaction[0].sale}\n</i>" \
                                   f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction[0].wallet}</i>"
                            try:
                                await callback.message.edit_text(text=f"<i>–ú–æ–∏ —Å–¥–µ–ª–∫–∏</i>\n\n"
                                                                      f"{text}",
                                                                 reply_markup=await MainForm.pagination_transaction_ikb(
                                                                     user_id=user.id,
                                                                     target="Profile",
                                                                     action="pagination_transaction"),
                                                                 parse_mode="HTML"
                                                                 )
                            except BadRequest:
                                await callback.message.delete()
                                await callback.message.answer(text=f"<i>–ú–æ–∏ —Å–¥–µ–ª–∫–∏</i>\n\n"
                                                                   f"{text}",
                                                              reply_markup=await MainForm.pagination_transaction_ikb(
                                                                  user_id=user.id,
                                                                  target="Profile",
                                                                  action="pagination_transaction"),
                                                              parse_mode="HTML"
                                                              )

                        else:
                            await callback.message.edit_text(text="–í—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ —Å–¥–µ–ª–æ–∫ üòû",
                                                             reply_markup=await MainForm.back_ikb(
                                                                 user_id=callback.from_user.id,
                                                                 target="Profile",
                                                                 action="get_Profile")
                                                             )

                    elif data.get("action") == "pagination_transaction":
                        page = int(data.get('id'))

                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        transaction = await CRUDTransaction.get_all(user_id=user.id)

                        if transaction:
                            currency = await CRUDCurrency.get(currency_id=transaction[page].currency_id)
                            approved = "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ" if transaction[page].approved else "‚ùå –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ùå"

                            text = f"ü§ù –°–¥–µ–ª–∫–∞ ‚Ññ {transaction[page].id} {approved}\n\n" \
                                   f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction[page].exchange_rate}\n</i>" \
                                   f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction[page].buy_BTC}\n</i>" \
                                   f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ {currency.name}: <i>{transaction[page].sale}\n</i>" \
                                   f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction[page].wallet}</i>"
                            try:
                                await callback.message.edit_text(text=f"<i>–ú–æ–∏ —Å–¥–µ–ª–∫–∏</i>\n\n"
                                                                      f"{text}",
                                                                 reply_markup=await MainForm.pagination_transaction_ikb(
                                                                     user_id=user.id,
                                                                     page=page,
                                                                     target="Profile",
                                                                     action="pagination_transaction"),
                                                                 parse_mode="HTML"
                                                                 )
                            except BadRequest:
                                await callback.message.delete()
                                await callback.message.answer(text=f"<i>–ú–æ–∏ —Å–¥–µ–ª–∫–∏</i>\n\n"
                                                                   f"{text}",
                                                              reply_markup=await MainForm.pagination_transaction_ikb(
                                                                  user_id=user.id,
                                                                  page=page,
                                                                  target="Profile",
                                                                  action="pagination_transaction"),
                                                              parse_mode="HTML"
                                                              )
                        else:
                            await callback.message.edit_text(text="–í—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ —Å–¥–µ–ª–æ–∫ üòû",
                                                             reply_markup=await MainForm.back_ikb(
                                                                 user_id=callback.from_user.id,
                                                                 target="Profile",
                                                                 action="get_Profile")
                                                             )

                    elif data.get('action') == 'get_check':
                        try:
                            check = int(data.get('id'))

                            user = await CRUDUsers.get(user_id=callback.from_user.id)
                            transaction = await CRUDTransaction.get_all(user_id=user.id)

                            if transaction[check].check != "None":
                                page = int(data.get("id"))
                                photo = open(f'user_check/{transaction[page].check}.jpg', 'rb')
                                await callback.message.delete()
                                await bot.send_photo(chat_id=callback.from_user.id, photo=photo,
                                                     caption=f"–§–æ—Ç–æ —á–µ–∫–∞",
                                                     reply_markup=await MainForm.back_ikb(user_id=callback.from_user.id,
                                                                                          target="Profile",
                                                                                          action="pagination_transaction",
                                                                                          page=check)
                                                     )
                            else:
                                await callback.answer(text="–§–æ—Ç–æ —á–µ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                        except Exception as e:
                            print(e)

                    elif data.get("action") == "get_referrals":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        referrals = await CRUDReferral.get_all(user_id=user.id)

                        text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ : {len(referrals)}"
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForm.back_ikb(
                                                             user_id=callback.from_user.id,
                                                             target="Profile",
                                                             page=0,
                                                             action="get_Profile")
                                                         )

                    elif data.get("action") == "get_userWallet":
                        await state.finish()
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        wallet = await CRUDWallet.get(user_id=user.id)
                        #await CreateWallet.new_wallet()

                        if wallet:
                            qr_code = f"https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl={wallet.address}"
                            await callback.message.delete()
                            balance = await CreateWallet.get_balance(wallet=wallet.address)
                            await bot.send_photo(photo=qr_code,
                                                 chat_id=callback.from_user.id,
                                                 caption=f"–í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n"
                                                         f"<code>{wallet.address}</code>\n"
                                                         f"–ë–∞–ª–∞–Ω—Å : "
                                                         f"{float(balance)} BTC",
                                                 reply_markup=await MainForm.wallet_user_ikb(
                                                     user_id=callback.from_user.id,
                                                     target="Profile",
                                                     action_back="get_Profile",
                                                     wallet_exists=True),
                                                 parse_mode="HTML"
                                                 )
                        else:
                            await callback.message.edit_text(text="–£ –≤–∞—Å –Ω–µ—Ç—É –∫–æ—à–µ–ª—å–∫–∞",
                                                             reply_markup=await MainForm.wallet_user_ikb(
                                                                 user_id=callback.from_user.id,
                                                                 target="Profile",
                                                                 action_back="get_Profile",
                                                                 wallet_exists=False)
                                                             )

                    elif data.get("action") == "get_createWallet":
                        get_wallet = await CreateWallet.create_wallet()
                        if get_wallet:
                            address = str(get_wallet['wallet']['address'])
                            passphrase = str(get_wallet['wallet']['passphrase'])
                            user = await CRUDUsers.get(user_id=callback.from_user.id)

                            await CRUDWallet.add(wallet=WalletSchema(user_id=user.id,
                                                                     address=address,
                                                                     passphrase=passphrase)
                                                 )
                            await callback.message.edit_text(text=f"–ó–∞–ø–æ–º–Ω–∏—Ç–µ –≤–∞—à –∫–ª—é—á –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
                                                                  f"{passphrase}",
                                                             reply_markup=await MainForm.next_ikb()
                                                             )
                        else:
                            pass

                    elif data.get("action") == "get_NextWallet":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        wallet = await CRUDWallet.get(user_id=user.id)
                        qr_code = f"https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl={wallet.address}"
                        await callback.message.delete()
                        await bot.send_photo(photo=qr_code,
                                             chat_id=callback.from_user.id,
                                             caption=f"–í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n"
                                                     f"<code>{wallet.address}</code>\n",
                                             reply_markup=await MainForm.wallet_user_ikb(
                                                 user_id=callback.from_user.id,
                                                 target="MainForm",
                                                 action_back="get_MainForm",
                                                 wallet_exists=True),
                                             parse_mode="HTML"
                                             )

                    elif data.get('action') == "money_transfer":
                        await callback.message.delete()
                        await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–µ—Å—Ç–∏ BTC",
                                                      reply_markup=await MainForm.back_ikb(
                                                          user_id=callback.from_user.id,
                                                          target="Profile",
                                                          action="get_userWallet",
                                                          page=0)
                                                      )

                        await MainState.WalletRecipient.set()

                    elif data.get('action') == "approved_trans_money":
                        data = await state.get_data()
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        wallet = await CRUDWallet.get(user_id=user.id)

                        transfer = await CreateWallet.money_transfer(wif_sender=wallet.wif,
                                                                     address_recipient=data["address_recipient"],
                                                                     btc_money=float(data["btc_money"]))
                        await callback.message.edit_text(text="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞\n\n"
                                                              f"{transfer}")
                        await state.finish()

                # –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å–≤–æ —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏ BTC
                elif data.get("target") == "BuyBTC":
                    price = await Cryptocurrency.get_Cryptocurrency(currency="USD")

                    text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É\n"\
                           f"1 Bitcoin ‚Çø = {price} USD üá∫üá∏ " \
                           f"<a href='https://www.coinbase.com/ru/converter/btc/usd'>Coinbase</a>\n\n"\

                    await callback.message.edit_text(text=text,
                                                     reply_markup=await MainForm.currency_ikb(
                                                         user_id=callback.from_user.id,
                                                         target="MainForm",
                                                         actionBack="get_MainForm"),
                                                     parse_mode="HTML",
                                                     disable_web_page_preview=True
                                                     )

                # –ú–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –í–∞–ª—é—Ç—ã
                elif data.get("target") == "Pay":
                    # –ü–æ–∫—É–ø–∫–∞ BYN or RUB –∑–∞ BTC
                    if data.get("action") == "EnterAmount":
                        currency = data.get("id")
                        currency_txt = "BYN üáßüáæ" if currency == "BYN" else "RUB üá∑üá∫"

                        if currency == "BYN":
                            price = await Cryptocurrency.get_Cryptocurrency(currency="BYN")
                            text = "–ö—É–ø–∏—Ç—å BTC –∑–∞ BYN\n" \
                                   f"1 Bitcoin ‚Çø = {price} BYN üáßüáæ " \
                                   f"<a href='https://www.coinbase.com/ru/converter/btc/byn'>Coinbase</a>\n\n" \
                                   f"<i>–ú–∏–Ω. —Å—É–º–º–∞ 50 BYN</i>"
                        else:
                            price = await Cryptocurrency.get_Cryptocurrency(currency="RUB")

                            text = "–ö—É–ø–∏—Ç—å BTC –∑–∞ RUB\n" \
                                   f"1 Bitcoin ‚Çø = {price} RUB üá∑üá∫ " \
                                   f"<a href='https://www.coinbase.com/ru/converter/btc/rub'>Coinbase</a>\n\n" \
                                   f"<i>–ú–∏–Ω. —Å—É–º–º–∞ 1000 RUB</i>"

                        await state.update_data(currency=currency)
                        await callback.message.edit_text(text=f"{text}\n\n"
                                                              f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency_txt}:",
                                                         reply_markup=await MainForm.back_ikb(
                                                             action="get_MainForm",
                                                             user_id=callback.from_user.id,
                                                             target="MainForm"),
                                                         disable_web_page_preview=True
                                                         )
                        await MainState.UserCoin.set()

                    # –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã –¥–ª—è –ø–æ–∫—É–∫–∏–∫ BTC
                    elif data.get('action') == 'get_SellBTC':
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ BTC:",
                                                         reply_markup=await MainForm.back_ikb(
                                                             user_id=callback.from_user.id,
                                                             target="MainForm",
                                                             action="get_MainForm")
                                                         )
                        await MainState.ByeBTC.set()

                        # price = await Cryptocurrency.get_Cryptocurrency(currency="USD")
                        # await callback.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
                        #                                       f"1 Bitcoin ‚Çø = {price} USD üá∫üá∏ \n\n"
                        #                                       f"üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n"
                        #                                       f"–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –û–ü–õ–ê–¢–ò–¢–¨‚úÖ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –≤ "
                        #                                       f"—Ç–µ—á–µ–Ω–∏–∏ ‚è±{CONFIG.PAYMENT_TIMER / 60} –º–∏–Ω—É—Ç!\n"
                        #                                       f"üßæ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: üáßüáæ 6493.77 BYN\n"
                        #                                       f"üßæ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: üá∑üá∫ 210244 RUB\n",
                        #                                  reply_markup=await MainForm.currency_ikb(
                        #                                      user_id=callback.from_user.id,
                        #                                      target="MainForm",
                        #                                      action="get_MainForm")
                        #                                  )

                    # –ü–æ–∫—É–ø–∫–∞ BTC –∑–∞ BYN or RUB
                    elif data.get('action') == "get_Currency":
                        currency = data.get("id")
                        currency_txt = "BYN üáßüáæ" if currency == "BYN" else "RUB üá∑üá∫"
                        get_data_buy = await state.get_data()
                        if currency == "BYN":
                            get_currency = await CRUDCurrency.get(currency_id=1)
                            await state.update_data(exchange_rate=get_data_buy['exchange_BYN'])
                            await state.update_data(sale=get_data_buy['price_BYN'])
                            await state.update_data(currency_id=get_currency.id)
                            await state.update_data(currency=get_currency.name)
                        else:
                            get_currency = await CRUDCurrency.get(currency_id=2)
                            await state.update_data(exchange_rate=get_data_buy['exchange_RUB'])
                            await state.update_data(sale=get_data_buy['price_RUB'])
                            await state.update_data(currency_id=get_currency.id)
                            await state.update_data(currency=get_currency.name)

                        data_bye = await state.get_data()
                        await callback.message.edit_text(text="üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π üîê:\n\n"
                                                              f"–ü–æ–∫—É–ø–∫–∞ - {data_bye['buy_BTC']} BTC",
                                                         reply_markup=await MainForm.wallet_ikb(
                                                             user_id=callback.from_user.id,
                                                             target="BuyBTC", action="SelectUserWalletBTC")
                                                         )

                # –ú–µ–Ω—é –≤–≤–æ–¥–∞ –∫–æ—à–µ–ª—å–∫–∞
                elif data.get("target") == "Buy":
                    if data.get("action") == "get_buy":
                        bye = float(data.get("id"))
                        await callback.message.edit_text(text="üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π üîê:\n\n"
                                                              f"–ü–æ–∫—É–ø–∫–∞ - {bye} BTC",
                                                         reply_markup=await MainForm.wallet_ikb(
                                                             user_id=callback.from_user.id,
                                                             target="BuyBTC",
                                                             action="SelectUserWallet")
                                                         )
                        await MainState.Wallet.set()

                    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –ü–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ—à–µ–ª—å–∫–∞
                    elif data.get("action") == "get_reenter":
                        get_data = await state.get_data()
                        await callback.message.edit_text(text="üîê –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π üîê\n\n"
                                                              f"–ü–æ–∫—É–ø–∫–∞ - {get_data['buy_BTC']} BTC",
                                                         reply_markup=await MainForm.back_ikb(
                                                             user_id=callback.from_user.id,
                                                             action="",
                                                             target="BuyBTC")
                                                         )
                        await MainState.Wallet.set()

                    # –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞
                    elif data.get('action') == "SelectUserWalletBTC":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        get_wallet = await CRUDWallet.get(user_id=user.id)
                        check_wallet = await Cryptocurrency.Check_Wallet(btc_address=get_wallet.address)

                        if check_wallet:
                            try:
                                get_btc = await state.get_data()
                                text = f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º BTC {get_btc['buy_BTC']} ‚û°Ô∏è‚û°Ô∏è‚û°\n\n" \
                                       f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {get_wallet.address}\n\n" \
                                       f"‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í—Å—ë –≤–µ—Ä–Ω–æ?\n" \
                                       f"–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É " \
                                       f"–ù–µ—Ç ‚õîÔ∏è, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.Ô∏è"

                                await state.update_data(wallet=get_wallet.address)
                                await callback.message.edit_text(text=text,
                                                                 reply_markup=await MainForm.CheckOut_wallet_ikb())
                            except KeyError as e:
                                print(e)
                                await callback.message.edit_text(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                                 reply_markup=await MainForm.start_ikb(
                                                                     user_id=callback.from_user.id)
                                                                 )
                                await callback.message.delete()

                        else:
                            await callback.message.edit_text(text=f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ <i>{get_wallet.address}</i> "
                                                                  f"–Ω–µ—Ç—É –≤ blockchain\n\n"
                                                                  f"–ñ–µ–ª–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –≤–∞—à –∞–¥—Ä–µ—Å Bitcoin - –∫–æ—à–µ–ª—å–∫–∞",
                                                             reply_markup=await MainForm.CheckOut_ikb(),
                                                             parse_mode="HTML"
                                                             )

                    elif data.get('action') == "SelectUserWallet":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        get_wallet = await CRUDWallet.get(user_id=user.id)
                        check_wallet = await Cryptocurrency.Check_Wallet(btc_address=get_wallet.address)

                        if check_wallet:
                            try:
                                get_btc = await state.get_data()
                                text = f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º BTC {get_btc['buy_BTC']} ‚û°Ô∏è‚û°Ô∏è‚û°\n\n" \
                                       f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {get_wallet.address}\n\n" \
                                       f"‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í—Å—ë –≤–µ—Ä–Ω–æ?\n" \
                                       f"–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É " \
                                       f"–ù–µ—Ç ‚õîÔ∏è, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.Ô∏è"

                                await state.update_data(wallet=get_wallet.address)
                                await callback.message.edit_text(text=text,
                                                                 reply_markup=await MainForm.CheckOut_wallet_ikb())
                            except KeyError as e:
                                print(e)
                                await callback.message.edit_text(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                                 reply_markup=await MainForm.start_ikb(
                                                                     user_id=callback.from_user.id)
                                                                 )
                                await callback.message.delete()

                        else:
                            await callback.message.edit_text(text=f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ <i>{get_wallet.address}</i> "
                                                                  f"–Ω–µ—Ç—É –≤ blockchain\n\n"
                                                                  f"–ñ–µ–ª–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –≤–∞—à –∞–¥—Ä–µ—Å Bitcoin - –∫–æ—à–µ–ª—å–∫–∞",
                                                             reply_markup=await MainForm.CheckOut_ikb(),
                                                             parse_mode="HTML"
                                                             )

                    elif data.get('action') == "get_requisites":
                        try:
                            wallet = await state.get_data()

                            text = "üßæ–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´\n" \
                                   "        üèßüí≥üíµ\n" \
                                   "- –°–ò–°–¢–ï–ú–ê –ï–†–ò–ü –ü–õ–ê–¢–ï–ñ–ò\n" \
                                   "1. –ï–†–ò–ü\n" \
                                   "2. –ë–ê–ù–ö–û–í–°–ö–ò–ï –§–ò–ù–ê–ù–°–û–í–´–ï \n" \
                                   "–£–°–õ–£–ì–ò\n" \
                                   "3. –ë–ê–ù–ö –ù–ö–§–û\n" \
                                   "4. –ú–¢–ë–ê–ù–ö\n" \
                                   "5. –ü–û–ü–û–õ–ù–ï–ù–ò–ï –î–ï–ë–ï–¢–û–í–û–ô –ö–ê–†–¢–´\n" \
                                   "6. –†/–°–ß–Å–¢       32271867\n" \
                                   "7. –ü–û–°–õ–ï –ü–ï–†–ï–í–û–î–ê –°–†–ï–î–°–¢–í \n" \
                                   "–ù–ê–ñ–ò–ú–ê–ï–ú –ö–ù–û–ü–ö–£ \n" \
                                   "üèßüèßüèß–Ø –û–ø–ª–∞—Ç–∏–ª üèßüèßüèß\n" \
                                   "8. –ü–†–ò–°–´–õ–ê–ï–ú –ß–ï–ö \n" \
                                   "9. üßæüßæ  –ß–ï–ö –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù üßæüßæ\n"

                            text_wallet = f"üöÄ –ù–∞ –í–∞—à –∫–æ—à–µ–ª–µ–∫  ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è <i>{wallet['wallet']}</i>\n" \
                                          f"–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <i>{wallet['buy_BTC']}</i> BTC. üöÄ"

                            await callback.message.edit_text(text=f"{text_wallet}\n\n"
                                                                  f"{text}",
                                                             reply_markup=await MainForm.user_paid_ikb(),
                                                             parse_mode="HTML"
                                                             )
                        except Exception as e:
                            print(e)
                            await callback.message.delete()
                            await callback.message.edit_text(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                             reply_markup=await MainForm.start_ikb(
                                                                 user_id=callback.from_user.id)
                                                             )

                # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø–æ—Ç–≤–≤–µ—Ä–∂–µ–Ω–∏–µ–º –æ–± –æ–ø–ª–∞—Ç–µ
                elif data.get("target") == "UserPaid":
                    await callback.message.edit_text(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É!\n"
                                                          "(–¥–æ 2 –ú–±)")
                    await MainState.UserPhoto.set()

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                # –í–≤–æ–¥ –∫–æ—à–µ–ª—å–∫–∞
                if await state.get_state() == "MainState:Wallet":
                    wallet = await Cryptocurrency.Check_Wallet(btc_address=message.text)
                    if wallet:
                        get_btc = await state.get_data()
                        text = f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º BTC {get_btc['buy_BTC']} ‚û°Ô∏è‚û°Ô∏è‚û°\n\n" \
                               f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {message.text}\n\n" \
                               f"‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í—Å—ë –≤–µ—Ä–Ω–æ?\n" \
                               f"–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É " \
                               f"–ù–µ—Ç ‚õîÔ∏è, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.Ô∏è"

                        await state.update_data(wallet=message.text)
                        await message.answer(text=text,
                                             reply_markup=await MainForm.CheckOut_wallet_ikb())

                    else:
                        await message.answer(text=f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ <i>{message.text}</i> –Ω–µ—Ç—É –≤ blockchain\n\n"
                                                  f"–ñ–µ–ª–∞–µ—Ç–µ –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –≤–∞—à –∞–¥—Ä–µ—Å Bitcoin - –∫–æ—à–µ–ª—å–∫–∞",
                                             reply_markup=await MainForm.CheckOut_ikb(),
                                             parse_mode="HTML"
                                             )

                # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
                elif await state.get_state() == "MainState:UserPhoto":
                    if message.content_type == "photo":
                        if message.photo[0].file_size > 2000:
                            await message.answer(text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 –º–±\n"
                                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑")
                            await MainState.UserPhoto.set()
                        else:
                            get_photo = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
                            photo = message.photo[0].file_id

                            get_data = await state.get_data()

                            user = await CRUDUsers.get(user_id=message.from_user.id)

                            transaction = await CRUDTransaction.add(transaction=TransactionSchema(user_id=user.id,
                                                                                                  **get_data)
                                                                    )

                            try:
                                await bot.download_file(file_path=get_photo.file_path,
                                                        destination=f'user_check/{transaction.id}_{message.from_user.id}.jpg',
                                                        timeout=12,
                                                        chunk_size=1215000)

                                get_transaction = await CRUDTransaction.get(transaction=transaction.id)
                                get_transaction.check = f'{transaction.id}_{message.from_user.id}'
                                await CRUDTransaction.update(transaction=get_transaction)
                                if len(get_data) > 6:
                                    text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {transaction.id}\n\n" \
                                           f"–ö—É—Ä—Å: {get_data['exchange_rate']} {get_data['currency']}\n" \
                                           f"–ü–æ–ª—É—á–µ–Ω–æ BTC: {get_data['buy_BTC']}\n" \
                                           f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {get_data['currency']}: {get_data['sale']}\n" \
                                           f"–ö–æ—à–µ–ª—ë–∫: {get_data['wallet']}"
                                else:
                                    text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {transaction.id}\n\n" \
                                           f"–ö—É—Ä—Å: {get_data['exchange_rate']}\n" \
                                           f"–ü–æ–ª—É—á–µ–Ω–æ {get_data['currency']}: {get_data['sale']}\n" \
                                           f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å  BTC: {get_data['buy_BTC']}\n" \
                                           f"–ö–æ—à–µ–ª—ë–∫: {get_data['wallet']}"

                                for admin in CONFIG.BOT.ADMINS:
                                    await bot.send_photo(chat_id=admin, photo=photo,
                                                         caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª!\n\n"
                                                                 f"{text}")

                                await message.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç "
                                                          "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º.\n\n"
                                                          "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ü§ó‚úåÔ∏è\n\n"
                                                          "üöÄ –ñ–µ–ª–∞–µ–º –í–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!")

                            except Exception as e:
                                print(e)

                                await message.answer(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                     reply_markup=await MainForm.start_ikb(user_id=message.from_user.id)
                                                     )
                            await state.finish()
                    else:
                        await message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
                        await MainState.UserPhoto.set()

                # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º BYN or RUB
                elif await state.get_state() == "MainState:UserCoin":
                    money = message.text.isdigit()
                    if money:
                        currency = await state.get_data()
                        if currency["currency"] == "BYN":
                            await MainForm.buying_currency(money=message.text,
                                                           currency=currency["currency"],
                                                           limit=50,
                                                           message=message,
                                                           state=state)
                        else:
                            await MainForm.buying_currency(money=message.text,
                                                           currency=currency["currency"],
                                                           limit=1000,
                                                           message=message,
                                                           state=state)

                    else:
                        await message.answer(text="–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
                                                  "–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä")
                        await MainState.UserCoin.set()

                # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ—à–µ–ª—å–∫–∞ BTC –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥
                elif await state.get_state() == "MainState:WalletRecipient":
                    wallet = await Cryptocurrency.Check_Wallet(btc_address=message.text)
                    if wallet:
                        user = await CRUDUsers.get(user_id=message.from_user.id)
                        wallet = await CRUDWallet.get(user_id=user.id)
                        balance = await CreateWallet.get_balance(wallet=wallet.address)

                        await state.update_data(address_recipient=message.text)  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ—à–µ–ª–µ–∫
                        await message.answer(text=f"–ö–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è <i>{message.text}</i>\n\n"
                                                  f"–í–∞—à –±–∞–ª–∞–Ω—Å {balance}\n"
                                                  f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
                                             parse_mode="HTML",
                                             reply_markup=await MainForm.back_ikb(
                                                 user_id=message.from_user.id,
                                                 target="Profile",
                                                 action="get_userWallet",
                                                 page=0)
                                             )
                        await MainState.Money.set()
                    else:
                        await message.answer(text=f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ <i>{message.text}</i> –Ω–µ—Ç—É –≤ blockchain\n\n"
                                                  f"–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∞–¥—Ä–µ—Å Bitcoin –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                                             reply_markup=await MainForm.back_ikb(
                                                 user_id=message.from_user.id,
                                                 target="Profile",
                                                 action="get_userWallet",
                                                 page=0),
                                             parse_mode="HTML"
                                             )
                        await MainState.WalletRecipient.set()

                # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ—à–µ–ª—å–∫–∞ BTC –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥
                elif await state.get_state() == "MainState:Money":
                    user = await CRUDUsers.get(user_id=message.from_user.id)
                    wallet = await CRUDWallet.get(user_id=user.id)
                    balance = await CreateWallet.get_balance(wallet=wallet.address)

                    get_money = await MainForm.isfloat(message.text)
                    if get_money:
                        if float(message.text) < balance:
                            data = await state.get_data()
                            await state.update_data(btc_money=message.text)  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–≤—É–¥–µ–Ω—É—é —Å—É–º–º—É BTC
                            await message.answer(text=f"–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
                                                      f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è <i>{data['address_recipient']}</i>\n"
                                                      f"–û—Ç–ø—Ä–∞–∏—Ç—å BTC {float(message.text)}",
                                                 parse_mode="HTML",
                                                 reply_markup=await MainForm.money_transfer_ikb(
                                                     user_id=message.from_user.id)
                                                 )
                        else:
                            await message.answer(text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
                                                      f"–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ {balance} BTC\n\n"
                                                      f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–∞",
                                                 reply_markup=await MainForm.back_ikb(
                                                     user_id=message.from_user.id,
                                                     target="Profile",
                                                     action="get_userWallet",
                                                     page=0)
                                                 )
                            await MainState.Money.set()
                    else:
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!",
                                             reply_markup=await MainForm.back_ikb(
                                                 user_id=message.from_user.id,
                                                 target="Profile",
                                                 action="get_userWallet",
                                                 page=0)
                                             )
                        await MainState.Money.set()

                elif await state.get_state() == "MainState:ByeBTC":
                    money_int = message.text.isdigit()
                    money_float = await MainForm.isfloat(value=message.text)

                    if money_float or money_int:
                        await MainForm.buying_BTC(user_money=message.text,
                                                  message=message,
                                                  state=state)
                    else:
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")