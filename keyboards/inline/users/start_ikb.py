import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.exceptions import BadRequest
from loguru import logger

from config import CONFIG
from config.config import CONFIGTEXT
from crud import CRUDUsers, CRUDTransaction, CRUDCurrency
from crud.referralCRUD import CRUDReferral
from crud.transactions_referralsCRUD import CRUDTransactionReferrals
from crud.verificationCRUD import CRUDVerification
from crud.walCRUD import CRUDWallet
from handlers.users.AllCallbacks import money_cb, main_cb, btc_cb
from handlers.users.CreateWallet import CreateWallet
from handlers.users.Cryptocurrency import Cryptocurrency
from keyboards.inline.users.byn import byn_cb
from keyboards.inline.users.rub import rub_cb
from loader import bot
from schemas import TransactionSchema, WalletSchema, VerificationSchema
from states.users.MainState import MainState

from decimal import Decimal
logger.add("debug.log", format="{time} {level} {message}", level="DEBUG", serialize=True)


class MainForm:

    @staticmethod
    async def send_timer_message(chat_id: int, state):
        await state.finish()
        await bot.send_message(chat_id=chat_id,
                               text='–í—Ä–µ–º—è –≤—ã—à–ª–æ!\n'
                                    f'{CONFIGTEXT.MAIN_FORM.TEXT}',
                               reply_markup=await MainForm.start_ikb(chat_id))

    @staticmethod
    async def confirmation_timer(message):
        await asyncio.sleep(10)
        await message.answer(text="–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç "
                                  "–≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –º—ã –≤–∞–º —Å–æ–æ–±—â–∏–º.\n\n"
                                  "–ï—Å–ª–∏ –≤–∞–º –Ω–µ —Å–æ–æ–±—â–∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. "
                                  "–û–Ω –±—ã—Å—Ç—Ä–æ –≤—Å–µ —Ä–µ—à–∏—Ç.\n\n"
                                  "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ü§ó‚úåÔ∏è\n\n"
                                  "üöÄ –ñ–µ–ª–∞–µ–º –í–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!")

    @staticmethod
    async def next_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞, —á—Ç–æ –±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–º–Ω–∏–ª —Å–µ–∫—Ä–µ—Ç–Ω—É—é —Ñ—Ä–∞–∑—É –∏ –ø–µ—Ä–µ—à–µ–ª –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è", callback_data=main_cb.new("Profile", "get_NextWallet",
                                                                                         0, 0)
                                         )
                ]
            ]
        )

    @staticmethod
    async def back_ikb(user_id: int, target: str, page: int = 0, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param page: –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, action, page, user_id))
                ]
            ]
        )

    @staticmethod
    async def proof_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü–û–î–¢–í–ï–†–î–ò–¢–¨ üëçüèª",
                                         callback_data=main_cb.new("Profile", "get_NextWallet", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def continue_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –ø–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚û°Ô∏è",
                                         callback_data=main_cb.new("Profile", "get_continue", 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Profile", "get_Profile", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def wallet_user_ikb(user_id: int,
                              target: str, action_back: str, wallet_exists: bool) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ BTC –∫–æ—à–µ–ª—å–∫–∞
        :param target:
        :param wallet_exists: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–≤–æ–¥–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥,
        –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ç–æ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π —Å–æ–∑–¥–∞—Ç—å
        :param action_back: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """

        data = {
            "‚ûï –°–æ–∑–¥–∞—Ç—å": {"target": "Profile", "action": "get_createWallet", "id": 0, "editid": user_id},
            "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": target, "action": action_back, "id": 0, "editid": user_id},
        }
        user = await CRUDUsers.get(user_id=user_id)
        verification = await CRUDVerification.get(user_id=user.id)
        if verification:
            confirm = 1 if verification.confirm else 0
        else:
            confirm = 0

        if wallet_exists:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üì§ –í—ã–≤–µ—Å—Ç–∏",
                                             callback_data=main_cb.new("Profile", "money_transfer", confirm, user_id)
                                             ),
                        InlineKeyboardButton(text="üì• –ü–æ–ø–æ–ª–Ω–∏—Ç—å",
                                             callback_data=main_cb.new("Profile", "money_reload", confirm, user_id)
                                             )
                    ],
                    [
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new(target, action_back,
                                                                                        0, user_id)
                                             )
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text=name, callback_data=main_cb.new(name_items["target_back"],
                                                                              name_items["action"],
                                                                              name_items["id"],
                                                                              name_items["editid"])
                                             )
                    ] for name, name_items in data.items()
                ]
            )

    @staticmethod
    async def start_ikb(user_id: int) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """
        data = {
            "BYN üáßüáæ": {"target": "Pay", "action": "EnterAmount", "id": "BYN", "editid": user_id},
            "RUB üá∑üá∫": {"target": "Pay", "action": "EnterAmount", "id": "RUB", "editid": user_id},
            "BTC ‚Çø": {"target": "Pay", "action": "get_SellBTC", "id": 0, "editid": user_id},
        }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üíª –ü—Ä–æ—Ñ–∏–ª—å",
                                         callback_data=main_cb.new("Profile", "get_Profile", 0, user_id))
                ],
                [
                    InlineKeyboardButton(text="BYN üáßüáæ", callback_data=byn_cb.new("Pay", "EnterAmount", 0, user_id)),
                    InlineKeyboardButton(text="RUB üá∑üá∫", callback_data=rub_cb.new("Pay", "EnterAmount", 0, user_id)),
                    InlineKeyboardButton(text="BTC ‚Çø", callback_data=btc_cb.new("Pay", "EnterAmount", 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def profile_ikb(user_id: int, target: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        user = await CRUDUsers.get(user_id=user_id)
        verification = await CRUDVerification.get(user_id=user.id)

        data = {"ü§ù –°–¥–µ–ª–∫–∏": {"target": "Profile", "action": "get_transaction", "id": 0, "editid": user_id},
                "üë®‚Äçüë¶‚Äçüë¶ –†–µ—Ñ–µ—Ä–∞–ª—ã": {"target": "Profile", "action": "get_referrals", "id": 0, "editid": user_id},
                "üëõ –ö–æ—à–µ–ª–µ–∫": {"target": "Profile", "action": "get_userWallet", "id": 0, "editid": user_id},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": target, "action": "get_MainForm", "id": 0, "editid": user_id}
                }
        if verification is None:
            data = {"ü§ù –°–¥–µ–ª–∫–∏": {"target": "Profile", "action": "get_transaction", "id": 0, "editid": user_id},
                    "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è": {"target": "Profile", "action": "get_verification", "id": 0, "editid": user_id},
                    "üë®‚Äçüë¶‚Äçüë¶ –†–µ—Ñ–µ—Ä–∞–ª—ã": {"target": "Profile", "action": "get_referrals", "id": 0, "editid": user_id},
                    "üëõ –ö–æ—à–µ–ª–µ–∫": {"target": "Profile", "action": "get_userWallet", "id": 0, "editid": user_id},
                    "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": target, "action": "get_MainForm", "id": 0, "editid": user_id}
                    }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=main_cb.new(name_items["target"],
                                                                              name_items["action"],
                                                                              name_items["id"],
                                                                              name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def pagination_transaction_ikb(target: str,
                                         user_id: int,
                                         action: str = None,
                                         page: int = 0) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target:  –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        :return:
        """
        orders = await CRUDTransaction.get_all(user_id=user_id)

        orders_count = len(orders)

        prev_page: int
        next_page: int

        if page == 0:
            prev_page = orders_count - 1
            next_page = page + 1
        elif page == orders_count - 1:
            prev_page = page - 1
            next_page = 0
        else:
            prev_page = page - 1
            next_page = page + 1

        back_ikb = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Profile", "get_Profile", 0, 0))
        prev_page_ikb = InlineKeyboardButton("‚Üê", callback_data=main_cb.new(target, action, prev_page, 0))
        check = InlineKeyboardButton("üßæ –ß–µ–∫", callback_data=main_cb.new("Profile", "get_check", page, 0))
        page = InlineKeyboardButton(f"{str(page + 1)}/{str(orders_count)}",
                                    callback_data=main_cb.new("", "", 0, 0))
        next_page_ikb = InlineKeyboardButton("‚Üí", callback_data=main_cb.new(target, action, next_page, 0))

        if orders_count == 1:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        check
                    ],
                    [
                        back_ikb
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        prev_page_ikb,
                        page, check,
                        next_page_ikb,
                    ],
                    [
                        back_ikb
                    ]
                ]
            )

    @staticmethod
    async def pagination_referrals_ikb(target: str,
                                       user_id: int,
                                       action: str = None,
                                       page: int = 0) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target:  –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        :return:
        """
        orders = await CRUDTransactionReferrals.get_all(referral_id=user_id)

        orders_count = len(orders)

        prev_page: int
        next_page: int

        if page == 0:
            prev_page = orders_count - 1
            next_page = page + 1
        elif page == orders_count - 1:
            prev_page = page - 1
            next_page = 0
        else:
            prev_page = page - 1
            next_page = page + 1

        back_ikb = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=main_cb.new("Profile", "get_Profile", 0, 0))
        prev_page_ikb = InlineKeyboardButton("‚Üê", callback_data=main_cb.new(target, action, prev_page, 0))
        page = InlineKeyboardButton(f"{str(page + 1)}/{str(orders_count)}",
                                    callback_data=main_cb.new("", "", 0, 0))
        next_page_ikb = InlineKeyboardButton("‚Üí", callback_data=main_cb.new(target, action, next_page, 0))

        if orders_count == 1:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        back_ikb
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        prev_page_ikb,
                        page,
                        next_page_ikb,
                    ],
                    [
                        back_ikb
                    ]
                ]
            )

    @staticmethod
    async def money_transfer_ikb(user_id: int) -> InlineKeyboardMarkup:
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–∏—Ç—å",
                                         callback_data=main_cb.new("Profile", "approved_trans_money", user_id, 0)),
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                         callback_data=main_cb.new("Profile", "get_userWallet", user_id, 0))
                ]
            ]
        )

    @staticmethod
    async def isfloat(value: str):
        try:
            float(value)
            return True
        except ValueError:
            return False

    @staticmethod
    @logger.catch
    async def process_profile(callback: CallbackQuery = None, message: Message = None,
                              state: FSMContext = None) -> None:

        if callback:
            if callback.data.startswith('main'):
                data = main_cb.parse(callback_data=callback.data)
                # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                if data.get("target") == "MainForm":
                    if data.get("action") == "get_MainForm":
                        await state.finish()
                        await callback.message.delete()
                        await callback.message.answer(text=CONFIGTEXT.MAIN_FORM.TEXT,
                                                      reply_markup=await MainForm.start_ikb(
                                                          user_id=callback.from_user.id)
                                                      )

                # –ü—Ä–æ—Ñ–∏–ª—å
                elif data.get("target") == "Profile":
                    if data.get("action") == "get_Profile":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        transaction = await CRUDTransaction.get_all(user_id=user.id)
                        verification = await CRUDVerification.get(user_id=user.id)
                        if verification:
                            get_verification = "–≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚úÖ" if verification.confirm \
                                else "–Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚ùå\n" \
                                     "<i>–æ–∂–∏–¥–∞–π—Ç–µ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</i>"
                        else:
                            get_verification = "–Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ‚ùå"

                        text = f"–ü—Ä–æ—Ñ–∏–ª—å {get_verification}\n\n" \
                               f"–†–µ–≥–∏—Ç—Ä–∞—Ü–∏—è –≤ –±–æ—Ç–µ - {user.date_created.strftime('%Y.%m.%d')}\n" \
                               f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ - {len(transaction)}\n\n" \
                               f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: \n" \
                               f"<code>{CONFIG.BOT.BOT_LINK}?start={callback.from_user.id}</code>"
                        await callback.message.delete()
                        await callback.message.answer(text=text,
                                                      reply_markup=await MainForm.profile_ikb(
                                                          user_id=callback.from_user.id,
                                                          target="MainForm"),
                                                      parse_mode="HTML"
                                                      )

                    elif data.get('action') == "get_verification":
                        await callback.message.edit_text(text="–ß—Ç–æ –±—ã –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–µ –æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–≤–µ "
                                                              "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏",
                                                         reply_markup=await MainForm.continue_ikb())

                    elif data.get('action') == "get_continue":
                        await callback.message.edit_text(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–∞—Å–ø–æ—Ä—Ç–∞")
                        await MainState.VerificationPhotoOne.set()

                    elif data.get("action") == "get_transaction":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        transaction = await CRUDTransaction.get_all(user_id=user.id)

                        if transaction:
                            currency = await CRUDCurrency.get(currency_id=transaction[0].currency_id)
                            approved = "‚úÖ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ" if transaction[0].approved else "‚ùå –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚ùå"

                            text = f"ü§ù –°–¥–µ–ª–∫–∞ ‚Ññ {transaction[0].id} {approved}\n\n" \
                                   f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction[0].exchange_rate}\n</i>" \
                                   f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction[0].buy_BTC}\n</i>" \
                                   f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ {currency.name}: <i>{transaction[0].sale}\n</i>" \
                                   f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction[0].wallet}</i>"
                            try:
                                await callback.message.edit_text(text=f"<i>–ú–æ–∏ —Å–¥–µ–ª–∫–∏</i>\n\n"
                                                                      f"{text}",
                                                                 reply_markup=await MainForm.pagination_transaction_ikb(
                                                                     user_id=user.id,
                                                                     target="Profile",
                                                                     action="pagination_transaction"),
                                                                 parse_mode="HTML"
                                                                 )
                            except BadRequest:
                                await callback.message.delete()
                                await callback.message.answer(text=f"<i>–ú–æ–∏ —Å–¥–µ–ª–∫–∏</i>\n\n"
                                                                   f"{text}",
                                                              reply_markup=await MainForm.pagination_transaction_ikb(
                                                                  user_id=user.id,
                                                                  target="Profile",
                                                                  action="pagination_transaction"),
                                                              parse_mode="HTML"
                                                              )

                        else:
                            await callback.message.edit_text(text="–í—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ —Å–¥–µ–ª–æ–∫ üòû",
                                                             reply_markup=await MainForm.back_ikb(
                                                                 user_id=callback.from_user.id,
                                                                 target="Profile",
                                                                 action="get_Profile")
                                                             )

                    elif data.get("action") == "pagination_transaction":
                        page = int(data.get('id'))

                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        transaction = await CRUDTransaction.get_all(user_id=user.id)

                        if transaction:
                            currency = await CRUDCurrency.get(currency_id=transaction[page].currency_id)
                            approved = "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ" if transaction[page].approved else "‚ùå –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚ùå"

                            text = f"ü§ù –°–¥–µ–ª–∫–∞ ‚Ññ {transaction[page].id} {approved}\n\n" \
                                   f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction[page].exchange_rate}\n</i>" \
                                   f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction[page].buy_BTC}\n</i>" \
                                   f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ {currency.name}: <i>{transaction[page].sale}\n</i>" \
                                   f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction[page].wallet}</i>"
                            try:
                                await callback.message.edit_text(text=f"<i>–ú–æ–∏ —Å–¥–µ–ª–∫–∏</i>\n\n"
                                                                      f"{text}",
                                                                 reply_markup=await MainForm.pagination_transaction_ikb(
                                                                     user_id=user.id,
                                                                     page=page,
                                                                     target="Profile",
                                                                     action="pagination_transaction"),
                                                                 parse_mode="HTML"
                                                                 )
                            except BadRequest:
                                await callback.message.delete()
                                await callback.message.answer(text=f"<i>–ú–æ–∏ —Å–¥–µ–ª–∫–∏</i>\n\n"
                                                                   f"{text}",
                                                              reply_markup=await MainForm.pagination_transaction_ikb(
                                                                  user_id=user.id,
                                                                  page=page,
                                                                  target="Profile",
                                                                  action="pagination_transaction"),
                                                              parse_mode="HTML"
                                                              )
                        else:
                            await callback.message.edit_text(text="–í—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª–∏ —Å–¥–µ–ª–æ–∫ üòû",
                                                             reply_markup=await MainForm.back_ikb(
                                                                 user_id=callback.from_user.id,
                                                                 target="Profile",
                                                                 action="get_Profile")
                                                             )

                    elif data.get('action') == 'get_check':
                        try:
                            check = int(data.get('id'))

                            user = await CRUDUsers.get(user_id=callback.from_user.id)
                            transaction = await CRUDTransaction.get_all(user_id=user.id)

                            if transaction[check].check != "None":
                                page = int(data.get("id"))
                                photo = open(f'user_check/{transaction[page].check}.jpg', 'rb')
                                await callback.message.delete()
                                await bot.send_photo(chat_id=callback.from_user.id, photo=photo,
                                                     caption=f"–§–æ—Ç–æ —á–µ–∫–∞",
                                                     reply_markup=await MainForm.back_ikb(user_id=callback.from_user.id,
                                                                                          target="Profile",
                                                                                          action="pagination_transaction",
                                                                                          page=check)
                                                     )
                            else:
                                await callback.answer(text="–§–æ—Ç–æ —á–µ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
                        except Exception as e:
                            print(e)

                    elif data.get("action") == "get_referrals":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        referrals = await CRUDReferral.get_all(user_id=user.id)
                        orders = await CRUDTransactionReferrals.get_all(referral_id=user.user_id)
                        text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ : {len(referrals)}\n\n" \
                               f"–†–µ—Ñ–µ—Ä–∞–ª - {orders[0].user_id}\n" \
                               f"–ü—Ä–æ—Ü–µ–Ω—Ç - {orders[0].percent}\n" \
                               f"–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ - {orders[0].date_transaction}"
                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForm.pagination_referrals_ikb(
                                                             user_id=callback.from_user.id,
                                                             target="Profile",
                                                             page=0,
                                                             action="get_referrals_pagination")
                                                         )

                    elif data.get("action") == "get_referrals_pagination":
                        page = int(data.get('id'))
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        referrals = await CRUDReferral.get_all(user_id=user.id)
                        orders = await CRUDTransactionReferrals.get_all(referral_id=user.user_id)
                        text = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ : {len(referrals)}\n\n" \
                               f"–†–µ—Ñ–µ—Ä–∞–ª - {orders[page].user_id}\n" \
                               f"–ü—Ä–æ—Ü–µ–Ω—Ç - {orders[page].percent}\n" \
                               f"–î–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ - {orders[page].date_transaction}"

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await MainForm.pagination_referrals_ikb(
                                                             user_id=callback.from_user.id,
                                                             target="Profile",
                                                             page=page,
                                                             action="get_referrals_pagination")
                                                         )

                    elif data.get("action") == "get_userWallet":
                        await state.finish()
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        wallet = await CRUDWallet.get(user_id=user.id)
                        #await CreateWallet.new_wallet()

                        if wallet:
                            qr_code = f"https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl={wallet.address}"
                            await callback.message.delete()
                            balance = await CreateWallet.get_balance(wallet=wallet.address)
                            await bot.send_photo(photo=qr_code,
                                                 chat_id=callback.from_user.id,
                                                 caption=f"–í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n"
                                                         f"<code>{wallet.address}</code>\n"
                                                         f"–ë–∞–ª–∞–Ω—Å : "
                                                         f"{float(balance)} BTC",
                                                 reply_markup=await MainForm.wallet_user_ikb(
                                                     user_id=callback.from_user.id,
                                                     target="Profile",
                                                     action_back="get_Profile",
                                                     wallet_exists=True),
                                                 parse_mode="HTML"
                                                 )
                        else:
                            await callback.message.edit_text(text="–£ –≤–∞—Å –Ω–µ—Ç—É –∫–æ—à–µ–ª—å–∫–∞",
                                                             reply_markup=await MainForm.wallet_user_ikb(
                                                                 user_id=callback.from_user.id,
                                                                 target="Profile",
                                                                 action_back="get_Profile",
                                                                 wallet_exists=False)
                                                             )

                    elif data.get("action") == "get_createWallet":
                        get_wallet = await CreateWallet.create_wallet()
                        if get_wallet:
                            address = str(get_wallet['wallet']['address'])
                            passphrase = str(get_wallet['wallet']['passphrase'])
                            user = await CRUDUsers.get(user_id=callback.from_user.id)

                            await CRUDWallet.add(wallet=WalletSchema(user_id=user.id,
                                                                     address=address,
                                                                     passphrase=passphrase)
                                                 )
                            await callback.message.edit_text(text=f"–ó–∞–ø–æ–º–Ω–∏—Ç–µ –≤–∞—à –∫–ª—é—á –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
                                                                  f"{passphrase}",
                                                             reply_markup=await MainForm.next_ikb()
                                                             )
                        else:
                            pass

                    elif data.get("action") == "get_NextWallet":
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        wallet = await CRUDWallet.get(user_id=user.id)
                        qr_code = f"https://chart.googleapis.com/chart?chs=250x250&cht=qr&chl={wallet.address}"
                        await callback.message.delete()
                        await bot.send_photo(photo=qr_code,
                                             chat_id=callback.from_user.id,
                                             caption=f"–í–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n"
                                                     f"<code>{wallet.address}</code>\n",
                                             reply_markup=await MainForm.wallet_user_ikb(
                                                 user_id=callback.from_user.id,
                                                 target="MainForm",
                                                 action_back="get_MainForm",
                                                 wallet_exists=True),
                                             parse_mode="HTML"
                                             )

                    elif data.get('action') == "money_transfer":
                        data = int(data.get('id'))
                        await callback.message.delete()
                        if data == 0:
                            await callback.message.answer(text="–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω\n\n"
                                                               "–ü—Ä–æ–π—Ç–∏—Ç–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞",
                                                          reply_markup=await MainForm.profile_ikb(
                                                              user_id=callback.from_user.id,
                                                              target="MainForm"),
                                                          parse_mode="HTML"
                                                          )
                        else:
                            await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–µ—Å—Ç–∏ BTC",
                                                          reply_markup=await MainForm.back_ikb(
                                                              user_id=callback.from_user.id,
                                                              target="Profile",
                                                              action="get_userWallet",
                                                              page=0)
                                                          )

                        await MainState.WalletRecipient.set()

                    elif data.get('action') == "approved_trans_money":
                        data = await state.get_data()
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        wallet = await CRUDWallet.get(user_id=user.id)

                        transfer = await CreateWallet.money_transfer(wif_sender=wallet.wif,
                                                                     address_recipient=data["address_recipient"],
                                                                     btc_money=float(data["btc_money"]))
                        await callback.message.edit_text(text="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞\n\n"
                                                              f"{transfer}")
                        await state.finish()

                    elif data.get('action') == 'money_reload':
                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        wallet = await CRUDWallet.get(user_id=user.id)
                        await callback.message.delete()
                        await callback.message.answer(text='–ß—Ç–æ –±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ –¥–µ–Ω—å–≥–∏ '
                                                           '–Ω–∞ –≤–∞—à –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞\n\n'
                                                           f'<code>{wallet.address}</code>',
                                                      parse_mode="HTML",
                                                      reply_markup=await MainForm.back_ikb(
                                                          user_id=callback.from_user.id,
                                                          target="Profile",
                                                          action="get_userWallet"
                                                      ))

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:

                # –ó–∞–≥—Ä—É–∑–∫–∞ 1 —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                if await state.get_state() == "MainState:VerificationPhotoOne":
                    if message.content_type == "photo":
                        if message.photo[0].file_size > 2000:
                            await message.answer(text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 –º–±\n"
                                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑")
                            await MainState.VerificationPhotoOne.set()
                        else:
                            get_photo = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
                            photo = message.photo[0].file_id

                            await bot.download_file(file_path=get_photo.file_path,
                                                    destination=f'user_verification/{message.from_user.id}_user_verification_1.jpg',
                                                    timeout=12,
                                                    chunk_size=1215000)

                            await state.update_data(verification=f'{message.from_user.id}_user_verification_1')
                            await message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–µ–ª—Ñ–∏ —Å –ø–∞—Å–ø–æ—Ä—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                            await MainState.VerificationPhotoTwo.set()
                    else:
                        await message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
                        await MainState.VerificationPhotoOne.set()

                # –ó–∞–≥—Ä—É–∑–∫–∞ 2 —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
                elif await state.get_state() == "MainState:VerificationPhotoTwo":
                    if message.content_type == "photo":
                        if message.photo[0].file_size > 2000:
                            await message.answer(text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 –º–±\n"
                                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑")
                            await MainState.VerificationPhotoTwo.set()
                        else:
                            get_photo = await bot.get_file(message.photo[len(message.photo) - 1].file_id)

                            await bot.download_file(file_path=get_photo.file_path,
                                                    destination=f'user_verification/{message.from_user.id}_user_verification_2.jpg',
                                                    timeout=12,
                                                    chunk_size=1215000)

                            await state.update_data(verification2=f'{message.from_user.id}_user_verification_2')
                            data = await state.get_data()
                            photo_id = [data['verification'], data['verification2']]
                            user = await CRUDUsers.get(user_id=message.from_user.id)

                            verification = await CRUDVerification.add(verification=VerificationSchema(
                                user_id=user.id,
                                photo_id=photo_id
                            ))
                            user.verification_id = verification.id

                            await CRUDUsers.update(user=user)

                            for admin in CONFIG.BOT.ADMINS:
                                await bot.send_message(chat_id=admin,
                                                       text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}\n"
                                                            f"–¥–æ–±–∞–≤–∏–ª —Ñ–æ—Ç–æ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

                            await message.answer(text="–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã\n\n"
                                                      "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                            await state.finish()
                    else:
                        await message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
                        await MainState.VerificationPhotoTwo.set()

                # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ—à–µ–ª—å–∫–∞ BTC –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥
                elif await state.get_state() == "MainState:WalletRecipient":
                    wallet = await Cryptocurrency.Check_Wallet(btc_address=message.text)
                    if wallet:
                        user = await CRUDUsers.get(user_id=message.from_user.id)
                        wallet = await CRUDWallet.get(user_id=user.id)
                        balance = await CreateWallet.get_balance(wallet=wallet.address)

                        await state.update_data(address_recipient=message.text)  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –∫–æ—à–µ–ª–µ–∫
                        await message.answer(text=f"–ö–æ—à–µ–ª–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è <i>{message.text}</i>\n\n"
                                                  f"–í–∞—à –±–∞–ª–∞–Ω—Å {balance}\n"
                                                  f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å",
                                             parse_mode="HTML",
                                             reply_markup=await MainForm.back_ikb(
                                                 user_id=message.from_user.id,
                                                 target="Profile",
                                                 action="get_userWallet",
                                                 page=0)
                                             )
                        await MainState.Money.set()
                    else:
                        await message.answer(text=f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ <i>{message.text}</i> –Ω–µ—Ç—É –≤ blockchain\n\n"
                                                  f"–í–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –∞–¥—Ä–µ—Å Bitcoin –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è",
                                             reply_markup=await MainForm.back_ikb(
                                                 user_id=message.from_user.id,
                                                 target="Profile",
                                                 action="get_userWallet",
                                                 page=0),
                                             parse_mode="HTML"
                                             )
                        await MainState.WalletRecipient.set()

                # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∫–æ—à–µ–ª—å–∫–∞ BTC –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–Ω–µ–≥
                elif await state.get_state() == "MainState:Money":
                    user = await CRUDUsers.get(user_id=message.from_user.id)
                    wallet = await CRUDWallet.get(user_id=user.id)
                    balance = await CreateWallet.get_balance(wallet=wallet.address)

                    get_money = await MainForm.isfloat(message.text)
                    if get_money:
                        if float(message.text) < balance:
                            data = await state.get_data()
                            await state.update_data(btc_money=message.text)  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–≤—É–¥–µ–Ω—É—é —Å—É–º–º—É BTC
                            await message.answer(text=f"–ü–æ—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é\n\n"
                                                      f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è <i>{data['address_recipient']}</i>\n"
                                                      f"–û—Ç–ø—Ä–∞–∏—Ç—å BTC {float(message.text)}",
                                                 parse_mode="HTML",
                                                 reply_markup=await MainForm.money_transfer_ikb(
                                                     user_id=message.from_user.id)
                                                 )
                        else:
                            await message.answer(text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
                                                      f"–£ –≤–∞—Å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ {balance} BTC\n\n"
                                                      f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–Ω–æ–≤–∞",
                                                 reply_markup=await MainForm.back_ikb(
                                                     user_id=message.from_user.id,
                                                     target="Profile",
                                                     action="get_userWallet",
                                                     page=0)
                                                 )
                            await MainState.Money.set()
                    else:
                        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!",
                                             reply_markup=await MainForm.back_ikb(
                                                 user_id=message.from_user.id,
                                                 target="Profile",
                                                 action="get_userWallet",
                                                 page=0)
                                             )
                        await MainState.Money.set()
