from decimal import Decimal

from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import BadRequest

from config import CONFIG
from crud import CRUDCurrency, CRUDUsers, CRUDTransaction
from crud.walCRUD import CRUDWallet
from handlers.users.AllCallbacks import money_cb, main_cb
from handlers.users.Cryptocurrency import Cryptocurrency
from loader import bot
from schemas import TransactionSchema
from states.users.MainState import MainState
from states.users.ReloadState import ReloadState


class Money_reload:

    @staticmethod
    async def start_ikb(user_id: int) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :return:
        """
        data = {
            "BYN üáßüáæ": {"target": "Pay", "action": "EnterAmount", "id": "BYN", "editid": user_id},
            "RUB üá∑üá∫": {"target": "Pay", "action": "EnterAmount", "id": "RUB", "editid": user_id},
            "BTC ‚Çø": {"target": "Pay", "action": "get_SellBTC", "id": 0, "editid": user_id},
        }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                                [
                                    InlineKeyboardButton(text="üíª –ü—Ä–æ—Ñ–∏–ª—å",
                                                         callback_data=main_cb.new("Profile", "get_Profile", 0,
                                                                                   user_id)
                                                         )
                                ]
                            ] + [
                                [
                                    InlineKeyboardButton(text=name, callback_data=main_cb.new(name_items["target"],
                                                                                              name_items["action"],
                                                                                              name_items["id"],
                                                                                              name_items["editid"]))
                                    for name, name_items in data.items()
                                ]
                            ]
        )

    @staticmethod
    async def isfloat(value: str):
        try:
            float(value)
            return True
        except ValueError:
            return False

    @staticmethod
    async def back_ikb(user_id: int, target: str, page: int = 0, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param page: –ù–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=money_cb.new(target, action, page, user_id))
                ]
            ]
        )

    @staticmethod
    async def currency_ikb(user_id: int, target: str, actionBack: str) -> InlineKeyboardMarkup:
        """
                –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –≤–∞–ª—é—Ç—ã
                :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
                :return:
                """
        data = {
            "–û–ü–õ–ê–¢–ò–¢–¨ BYN üáßüáæ": {"target": "Pay", "action": "get_Currency", "id": "BYN", "editid": user_id},
            "–û–ü–õ–ê–¢–ò–¢–¨ RUB üá∑üá∫": {"target": "Pay", "action": "get_Currency", "id": "RUB", "editid": user_id},
        }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=money_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"])
                                         )
                    for name, name_items in data.items()
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=money_cb.new("Pay", "get_reenter", 0, user_id))
                ]
            ]
        )

    @staticmethod
    async def CheckOut_wallet_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–æ–≥–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∫–æ—à–µ–ª–µ–∫, —Å–ø—Ä–æ—Å–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–í–µ—Ä–Ω–æ üëå", callback_data=money_cb.new("Pay", "get_requisites", 0, 0)),
                    InlineKeyboardButton(text="–ù–µ—Ç ‚õîÔ∏è", callback_data=money_cb.new("Pay", "get_reenter", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def user_paid_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="–Ø –û–ü–õ–ê–¢–ò–õ ‚úÖ", callback_data=money_cb.new("UserPaid", 0, 0, 0))
                ],
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=money_cb.new("Buy", "get_reenter", 0, 0))
                ]
            ]
        )

    @staticmethod
    async def Money_reload(callback: CallbackQuery = None, message: Message = None, state: FSMContext = None) -> None:

        if callback:
            if callback.data.startswith('money'):
                data = money_cb.parse(callback_data=callback.data)

                if data.get('target') == "get_Profile":
                    if data.get('action') == "money_reload":
                        await callback.message.delete()
                        await callback.message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ BTC –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å",
                                                      reply_markup=await Money_reload.back_ikb(
                                                          user_id=callback.from_user.id,
                                                          target="Pay",
                                                          action="get_reenter",
                                                          page=0)
                                                      )
                        await ReloadState.ReloadMoney.set()

                    elif data.get('action') == "Profile":
                        pass

                if data.get('target') == "Pay":
                    if data.get('action') == "get_Currency":
                        currency = data.get("id")
                        get_data_buy = await state.get_data()
                        if currency == "BYN":
                            get_currency = await CRUDCurrency.get(currency_id=1)
                            await state.update_data(exchange_rate=get_data_buy['exchange_BYN'])
                            await state.update_data(sale=get_data_buy['price_BYN'])
                            await state.update_data(currency_id=get_currency.id)
                            await state.update_data(currency=get_currency.name)
                        else:
                            get_currency = await CRUDCurrency.get(currency_id=2)
                            await state.update_data(exchange_rate=get_data_buy['exchange_RUB'])
                            await state.update_data(sale=get_data_buy['price_RUB'])
                            await state.update_data(currency_id=get_currency.id)
                            await state.update_data(currency=get_currency.name)

                        user = await CRUDUsers.get(user_id=callback.from_user.id)
                        get_wallet = await CRUDWallet.get(user_id=user.id)
                        check_wallet = await Cryptocurrency.Check_Wallet(btc_address=get_wallet.address)

                        try:
                            get_btc = await state.get_data()
                            text = f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º BTC {get_btc['buy_BTC']} ‚û°Ô∏è‚û°Ô∏è‚û°\n\n" \
                                   f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å {get_btc['sale']} {get_btc['currency']}\n\n" \
                                   f"–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: {get_wallet.address}\n\n" \
                                   f"‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –í—Å—ë –≤–µ—Ä–Ω–æ?\n" \
                                   f"–ï—Å–ª–∏ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É " \
                                   f"–ù–µ—Ç ‚õîÔ∏è, –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∑–∞–Ω–æ–≤–æ.Ô∏è"

                            await state.update_data(wallet=get_wallet.address)
                            await callback.message.edit_text(text=text,
                                                             reply_markup=await Money_reload.CheckOut_wallet_ikb())
                        except KeyError as e:
                            print(e)
                            await callback.message.edit_text(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                             reply_markup=await Money_reload.start_ikb(
                                                                 user_id=callback.from_user.id)
                                                             )
                            await callback.message.delete()

                    elif data.get('action') == "get_requisites":
                        try:
                            wallet = await state.get_data()

                            text = "üßæ–†–ï–ö–í–ò–ó–ò–¢–´ –î–õ–Ø –û–ü–õ–ê–¢–´\n" \
                                   "        üèßüí≥üíµ\n" \
                                   "- –°–ò–°–¢–ï–ú–ê –ï–†–ò–ü –ü–õ–ê–¢–ï–ñ–ò\n" \
                                   "1. –ï–†–ò–ü\n" \
                                   "2. –ë–ê–ù–ö–û–í–°–ö–ò–ï –§–ò–ù–ê–ù–°–û–í–´–ï \n" \
                                   "–£–°–õ–£–ì–ò\n" \
                                   "3. –ë–ê–ù–ö –ù–ö–§–û\n" \
                                   "4. –ú–¢–ë–ê–ù–ö\n" \
                                   "5. –ü–û–ü–û–õ–ù–ï–ù–ò–ï –î–ï–ë–ï–¢–û–í–û–ô –ö–ê–†–¢–´\n" \
                                   "6. –†/–°–ß–Å–¢       32271867\n" \
                                   "7. –ü–û–°–õ–ï –ü–ï–†–ï–í–û–î–ê –°–†–ï–î–°–¢–í \n" \
                                   "–ù–ê–ñ–ò–ú–ê–ï–ú –ö–ù–û–ü–ö–£ \n" \
                                   "üèßüèßüèß–Ø –û–ø–ª–∞—Ç–∏–ª üèßüèßüèß\n" \
                                   "8. –ü–†–ò–°–´–õ–ê–ï–ú –ß–ï–ö \n" \
                                   "9. üßæüßæ  –ß–ï–ö –û–ë–Ø–ó–ê–¢–ï–õ–ï–ù üßæüßæ\n"

                            text_wallet = f"üöÄ –ù–∞ –í–∞—à –∫–æ—à–µ–ª–µ–∫  ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è <i>{wallet['wallet']}</i>\n" \
                                          f"–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <i>{wallet['buy_BTC']}</i> BTC. üöÄ"

                            await callback.message.edit_text(text=f"{text_wallet}\n\n"
                                                                  f"{text}",
                                                             reply_markup=await Money_reload.user_paid_ikb(),
                                                             parse_mode="HTML"
                                                             )
                        except Exception as e:
                            print(e)
                            await callback.message.delete()
                            await callback.message.edit_text(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                             reply_markup=await Money_reload.start_ikb(
                                                                 user_id=callback.from_user.id)
                                                             )

                    elif data.get('action') == "get_reenter":
                        await state.finish()
                        await callback.message.edit_text(text="–°–¥–µ–ª–∞–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!\n"
                                                              "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
                                                              "1. –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å\n"
                                                              "2. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–≤ –°–æ–æ–±—â–µ–Ω–∏–∏) \n"
                                                              "3. –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É  –û–ü–õ–ê–¢–ò–¢–¨‚úÖ \n"
                                                              "4. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ø –û–ü–õ–ê–¢–ò–õ‚úÖ\n"
                                                              "5. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É\n"
                                                              "6. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å bitcoin –∫–æ—à–µ–ª—å–∫–∞ (–≤ –°–æ–æ–±—â–µ–Ω–∏–∏)\n"
                                                              "7. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏—Ö\n"
                                                              "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å:",
                                                         reply_markup=await Money_reload.start_ikb(
                                                             user_id=callback.from_user.id
                                                         ))

                # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å –ø–æ—Ç–≤–≤–µ—Ä–∂–µ–Ω–∏–µ–º –æ–± –æ–ø–ª–∞—Ç–µ
                elif data.get("target") == "UserPaid":
                    await callback.message.edit_text(text="üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ –æ–ø–ª–∞—Ç—É!\n"
                                                          "(–¥–æ 2 –ú–±)")
                    await ReloadState.UserPhoto.set()

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                # –í–≤–æ–¥ –∫–æ—à–µ–ª—å–∫–∞
                if await state.get_state() == "ReloadState:ReloadMoney":
                    get_float = await Money_reload.isfloat(message.text)
                    if get_float:
                        price_BTC = await Cryptocurrency.get_Cryptocurrency(currency="USD")
                        rub = float(await Cryptocurrency.get_rub())
                        usd_to_byn = await Cryptocurrency.get_usd()
                        user_coin = Decimal(message.text)

                        bye_byn = round(user_coin * Decimal(usd_to_byn) * Decimal(price_BTC), 3)
                        bye_rub = round(user_coin * Decimal(rub) * Decimal(price_BTC), 3)

                        await state.update_data(buy_BTC=message.text)
                        await state.update_data(exchange_BYN=Decimal(price_BTC) * Decimal(usd_to_byn))
                        await state.update_data(exchange_RUB=Decimal(price_BTC) * Decimal(rub))
                        await state.update_data(price_BYN=bye_byn)
                        await state.update_data(price_RUB=bye_rub)

                        text = f"üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ Bitcoin: {price_BTC}$\n" \
                               f"üì¢ –í–Ω–∏–º–∞–Ω–∏–µ! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!\n" \
                               f"–ù–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –û–ü–õ–ê–¢–ò–¢–¨‚úÖ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ " \
                               f"–æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ ‚è±{CONFIG.PAYMENT_TIMER / 60} –º–∏–Ω—É—Ç!\n\n" \
                               f"üßæ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: üáßüáæ {bye_byn} BYN\n\n" \
                               f"üßæ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: üá∑üá∫ {bye_rub} RUB\n\n" \
                               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ BTC: {Decimal(message.text)}\n" \
                               f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
                               f"–ü–ï–†–ï–ô–¢–ò –ö –û–ü–õ–ê–¢–ï?"

                        await message.answer(text=text,
                                             reply_markup=await Money_reload.currency_ikb(
                                                 user_id=message.from_user.id,
                                                 target="get_MainForm",
                                                 actionBack="MainForm")
                                             )
                    else:
                        await message.answer(text="–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ —á–∏—Å–ª–æ\n"
                                                  "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
                        await MainState.ReloadMoney.set()

                elif await state.get_state() == "ReloadState:UserPhoto":
                    if message.content_type == "photo":
                        if message.photo[0].file_size > 2000:
                            await message.answer(text="–ö–∞—Ä—Ç–∏–Ω–∫–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 2 –º–±\n"
                                                      "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—â–µ —Ä–∞–∑")
                            await MainState.UserPhoto.set()
                        else:
                            get_photo = await bot.get_file(message.photo[len(message.photo) - 1].file_id)
                            photo = message.photo[0].file_id

                            get_data = await state.get_data()

                            user = await CRUDUsers.get(user_id=message.from_user.id)

                            transaction = await CRUDTransaction.add(transaction=TransactionSchema(user_id=user.id,
                                                                                                  operation_id=3,
                                                                                                  **get_data)
                                                                    )

                            try:
                                await bot.download_file(file_path=get_photo.file_path,
                                                        destination=f'user_check/{transaction.id}_{message.from_user.id}.jpg',
                                                        timeout=12,
                                                        chunk_size=1215000)

                                get_transaction = await CRUDTransaction.get(transaction=transaction.id)
                                get_transaction.check = f'{transaction.id}_{message.from_user.id}'
                                await CRUDTransaction.update(transaction=get_transaction)
                                if len(get_data) > 6:
                                    text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {transaction.id}\n\n" \
                                           f"–ö—É—Ä—Å: {round(get_data['exchange_rate'], 3)} {get_data['currency']}\n" \
                                           f"–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –Ω–∞ {get_data['buy_BTC']} BTC\n" \
                                           f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {get_data['currency']}: {get_data['sale']}\n" \
                                           f"–ö–æ—à–µ–ª—ë–∫: {get_data['wallet']}"
                                else:
                                    text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {transaction.id}\n\n" \
                                           f"–ö—É—Ä—Å: {get_data['exchange_rate']}\n" \
                                           f"–ü–æ–ª—É—á–µ–Ω–æ {get_data['currency']}: {get_data['sale']}\n" \
                                           f"–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å  BTC: {get_data['buy_BTC']}\n" \
                                           f"–ö–æ—à–µ–ª—ë–∫: {get_data['wallet']}"

                                for admin in CONFIG.BOT.ADMINS:
                                    await bot.send_photo(chat_id=admin, photo=photo,
                                                         caption=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} "
                                                                 f"—Ö–æ—á–µ—Ç –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫\n\n"
                                                                 f"{text}")

                                #await MainForm.confirmation_timer(message=message)

                            except Exception as e:
                                print(e)

                                await message.answer(text="–£ –≤–∞—Å –≤—ã—à–ª–æ –≤—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É",
                                                     reply_markup=await Money_reload.start_ikb(user_id=message.from_user.id)
                                                     )
                            await state.finish()
                    else:
                        await message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
                        await MainState.UserPhoto.set()