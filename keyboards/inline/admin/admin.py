from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.exceptions import BadRequest

from config import CONFIG
from handlers.users.AllCallbacks import admin_cb
from loader import bot
from states.admins.AdminState import AdminState


class AdminForm:

    @staticmethod
    async def back_ikb(target: str, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=admin_cb.new(target, action, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def change_ikb(get_change: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ö–æ–º–∏—Å—Å–∏–∏(0) –∏–ª–∏ –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç(1)
        :param get_change: –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —á—Ç–æ –≤—ã–±—Ä–∞–ª –∞–¥–º–∏–Ω 1 –∏–ª–∏ 0
        :return:
        """
        data = {"üîÅ –ò–∑–º–µ–Ω–∏—Ç—å": {"target": "PaymentSetup", "action": "get_change", "id": 1, "editId": get_change},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "PaymentSetup", "action": "get_Setup", "id": 2, "editId": get_change},
                }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editId"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def start_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:
        """
        data = {"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–ø–ª–∞—Ç—ã": {"target": "PaymentSetup", "action": "get_Setup", "id": 0, "editid": 0},
                "üì® –†–∞—Å—Å—ã–ª–∫–∞": {"target": "Newsletter", "action": "get_Newsletter", "id": 0, "editid": 0},
                "üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": {"target": "Users", "action": "get_Users", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def payment_setup_ikb() -> InlineKeyboardMarkup:
        data = {"% –ö–æ–º–∏—Å—Å–∏—è": {"target": "PaymentSetup", "action": "get_Commission", "id": 0, "editid": 0},
                "üßæ –†–∞—Å—á–µ—Ç–Ω—ã–π –°—á–µ—Ç": {"target": "PaymentSetup", "action": "get_Settlement_Account", "id": 0,
                                      "editid": 0},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def process_admin_profile(callback: CallbackQuery = None, message: Message = None,
                                    state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith('admin'):
                data = admin_cb.parse(callback_data=callback.data)

                if data.get("target") == "StartMenu":
                    await callback.message.edit_text(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                                                     reply_markup=await AdminForm.start_ikb())

                elif data.get("target") == "PaymentSetup":
                    if data.get("action") == "get_Setup":
                        await callback.message.edit_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–ª–∞—Ç—ã",
                                                         reply_markup=await AdminForm.payment_setup_ikb())
                        await state.finish()

                    elif data.get("action") == "get_Commission":
                        await callback.message.edit_text(text=f"–ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {CONFIG.COMMISSION}%",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="COMMISSION")
                                                         )

                    elif data.get("action") == "get_Settlement_Account":
                        await callback.message.edit_text(text=f"–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç <i>{CONFIG.PAYMENT.REQUISITES}</i>",
                                                         reply_markup=await AdminForm.change_ikb(
                                                             get_change="REQUISITES"),
                                                         parse_mode="HTML"
                                                         )

                    elif data.get("action") == "get_change":
                        get_change_data = str(data.get("editId"))
                        text = ""

                        if get_change_data == "COMMISSION":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ö–æ–º–∏—Å—Å–∏–∏"
                            await AdminState.COMMISSION.set()

                        elif get_change_data == "REQUISITES":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –†–∞—Å—á—ë—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞"
                            await AdminState.REQUISITES.set()

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await AdminForm.back_ikb(target="PaymentSetup",
                                                                                               action="get_Setup")
                                                         )

                elif data.get("target") == "PaymentSetup":
                    if data.get("action") == "get_Newsletter":
                        pass

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                if await state.get_state() == "AdminState:COMMISSION":
                    if message.text.isdigit():
                        CONFIG.COMMISSION = message.text
                        await message.answer(text=f"–ö–æ–º–∏—Å—Å–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ {message.text}",
                                             reply_markup=await AdminForm.payment_setup_ikb())
                        await state.finish()
                    else:
                        await message.answer(text="–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä")
                        await AdminState.COMMISSION.set()

                elif await state.get_state() == "AdminState:REQUISITES":
                    if message.text.isdigit():
                        CONFIG.COMMISSION = message.text
                        await message.answer(text=f"–ö–æ–º–∏—Å—Å–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ {message.text}",
                                             reply_markup=await AdminForm.payment_setup_ikb())
                        await state.finish()
                    else:
                        await message.answer(text="–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä")
                        await AdminState.REQUISITES.set()

