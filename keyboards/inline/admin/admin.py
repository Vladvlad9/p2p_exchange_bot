from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, Message
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.exceptions import BadRequest

from config import CONFIG
from crud import CRUDUsers, CRUDTransaction
from handlers.users.Cryptocurrency import Cryptocurrency
from loader import bot
from schemas import TransactionSchema
from states.admins.AdminState import AdminState

admin_cb = CallbackData("admin", "target", "action", "id", "editId")


class AdminForm:
    @staticmethod
    async def back_ikb(target: str, action: str = None) -> InlineKeyboardMarkup:
        """
        –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –æ–¥–∏–Ω —à–∞–≥ –Ω–∞–∑–∞–¥
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param target: –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :return:
        """
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=admin_cb.new(target, action, 0, 0))
                ]
            ]
        )

    @staticmethod
    async def change_ikb(get_change: str) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ö–æ–º–∏—Å—Å–∏–∏(0) –∏–ª–∏ –†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç(1)
        :param get_change: –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —á—Ç–æ –≤—ã–±—Ä–∞–ª –∞–¥–º–∏–Ω 1 –∏–ª–∏ 0
        :return:
        """
        data = {"üîÅ –ò–∑–º–µ–Ω–∏—Ç—å": {"target": "PaymentSetup", "action": "get_change", "id": 1, "editId": get_change},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "PaymentSetup", "action": "get_Setup", "id": 2, "editId": get_change},
                }

        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editId"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def start_ikb() -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
        :return:
        """
        data = {"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –û–ø–ª–∞—Ç—ã": {"target": "PaymentSetup", "action": "get_Setup", "id": 0, "editid": 0},
                "üì® –†–∞—Å—Å—ã–ª–∫–∞": {"target": "Newsletter", "action": "get_Newsletter", "id": 0, "editid": 0},
                "üë®‚Äçüíª –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": {"target": "Users", "action": "get_Users", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def payment_setup_ikb() -> InlineKeyboardMarkup:
        data = {"% –ö–æ–º–∏—Å—Å–∏—è": {"target": "PaymentSetup", "action": "get_Commission", "id": 0, "editid": 0},
                "üßæ –†–∞—Å—á–µ—Ç–Ω—ã–π –°—á–µ—Ç": {"target": "PaymentSetup", "action": "get_Settlement_Account", "id": 0,
                                      "editid": 0},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def users_ikb() -> InlineKeyboardMarkup:
        """
                –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
                :return:
                """
        data = {"üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": {"target": "Users", "action": "get_AllUsers", "id": 0, "editid": 0},
                "#Ô∏è‚É£ –ù–æ–º–µ—Ä —á–µ–∫": {"target": "Users", "action": "get_CheckNumber", "id": 0, "editid": 0},
                "üÜî id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è": {"target": "Users", "action": "get_UsersId", "id": 0, "editid": 0},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "StartMenu", "action": "", "id": 0, "editid": 0},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"]))
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def check_confirmation_ikb(user_id: int, page: int = 0, action_back: str = None,
                                     action_confirm: str = None) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param user_id: id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param page: –Ω–µ –æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        :param action_back: –Ω–µ –æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        :param action_confirm: –Ω–µ –æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        :return:
        """
        user = await CRUDUsers.get(id=user_id)
        chat = await bot.get_chat(chat_id=user.user_id)
        button_url = chat.user_url

        data = {"‚úÖ –ü–æ—Ç–≤–µ—Ä–¥–∏—Ç—å –û–ø–ª–∞—Ç—É": {"target": "Users", "action": action_confirm, "id": user_id, "editid": page},
                "‚óÄÔ∏è –ù–∞–∑–∞–¥": {"target": "Users", "action": action_back, "id": page, "editid": user_id},
                }
        return InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üì≤ –°–≤—è–∑–∞—Ç—å—Å—è", url=button_url)
                ]

            ] + [
                [
                    InlineKeyboardButton(text=name, callback_data=admin_cb.new(name_items["target"],
                                                                               name_items["action"],
                                                                               name_items["id"],
                                                                               name_items["editid"])
                                         )
                ] for name, name_items in data.items()
            ]
        )

    @staticmethod
    async def pagination_transaction_ikb(target: str,
                                         user_id: int = None,
                                         action: str = None,
                                         action_back: str = None,
                                         page: int = 0) -> InlineKeyboardMarkup:
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param action_back:
        :param target:  –ü–∞—Ä–∞–º–µ—Ç—Ä —á—Ç–æ –±—ã —É–∫–∞–∑–∞—Ç—å –∫—É–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞–∑–∞–¥
        :param user_id: id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param action: –ù–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –µ—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å –ø–æ–¥–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        :param page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        :return:
        """
        if user_id:
            orders = await CRUDTransaction.get_all(user_id=user_id)
        else:
            orders = await CRUDTransaction.get_all()

        orders_count = len(orders)

        prev_page: int
        next_page: int

        if page == 0:
            prev_page = orders_count - 1
            next_page = page + 1
        elif page == orders_count - 1:
            prev_page = page - 1
            next_page = 0
        else:
            prev_page = page - 1
            next_page = page + 1

        back_ikb = InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=admin_cb.new("Users", action_back, 0, user_id))
        prev_page_ikb = InlineKeyboardButton("‚Üê", callback_data=admin_cb.new(target, action, prev_page, user_id))
        check = InlineKeyboardButton("‚ò∞", callback_data=admin_cb.new("Users", "get_check_admin", page, user_id))
        page = InlineKeyboardButton(f"{str(page + 1)}/{str(orders_count)}",
                                    callback_data=admin_cb.new("", "", 0, 0))
        next_page_ikb = InlineKeyboardButton("‚Üí", callback_data=admin_cb.new(target, action, next_page, user_id))

        if orders_count == 1:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        check
                    ],
                    [
                        back_ikb
                    ]
                ]
            )
        else:
            return InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        prev_page_ikb,
                        page, check,
                        next_page_ikb,
                    ],
                    [
                        back_ikb
                    ]
                ]
            )

    @staticmethod
    async def process_admin_profile(callback: CallbackQuery = None, message: Message = None,
                                    state: FSMContext = None) -> None:
        if callback:
            if callback.data.startswith('admin'):
                data = admin_cb.parse(callback_data=callback.data)

                if data.get("target") == "StartMenu":
                    await callback.message.edit_text(text="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
                                                     reply_markup=await AdminForm.start_ikb())

                elif data.get("target") == "PaymentSetup":
                    if data.get("action") == "get_Setup":
                        await callback.message.edit_text(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–ª–∞—Ç—ã",
                                                         reply_markup=await AdminForm.payment_setup_ikb())
                        await state.finish()

                    elif data.get("action") == "get_Commission":
                        await callback.message.edit_text(text=f"–ö–æ–º–∏—Å—Å–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {CONFIG.COMMISSION}%",
                                                         reply_markup=await AdminForm.change_ikb(get_change="COMMISSION")
                                                         )

                    elif data.get("action") == "get_Settlement_Account":
                        await callback.message.edit_text(text=f"–†–∞—Å—á—ë—Ç–Ω—ã–π —Å—á—ë—Ç <i>{CONFIG.PAYMENT.REQUISITES}</i>",
                                                         reply_markup=await AdminForm.change_ikb(get_change="REQUISITES"),
                                                         parse_mode="HTML"
                                                         )

                    elif data.get("action") == "get_change":
                        get_change_data = str(data.get("editId"))
                        text = ""

                        if get_change_data == "COMMISSION":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ö–æ–º–∏—Å—Å–∏–∏"
                            await AdminState.COMMISSION.set()

                        elif get_change_data == "REQUISITES":
                            text = "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –†–∞—Å—á—ë—Ç–Ω–æ–≥–æ —Å—á—ë—Ç–∞"
                            await AdminState.REQUISITES.set()

                        await callback.message.edit_text(text=text,
                                                         reply_markup=await AdminForm.back_ikb(target="PaymentSetup",
                                                                                               action="get_Setup")
                                                         )

                elif data.get("target") == "PaymentSetup":
                    if data.get("action") == "get_Newsletter":
                        pass

                elif data.get("target") == "Users":
                    if data.get("action") == "get_Users":
                        try:
                            await callback.message.edit_text(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                             reply_markup=await AdminForm.users_ikb())
                        except BadRequest:
                            await callback.message.delete()
                            await callback.message.answer(text="–ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                          reply_markup=await AdminForm.users_ikb())

                    elif data.get("action") == "get_AllUsers":
                        transaction = await CRUDTransaction.get_all()

                        if transaction:
                            approved = "‚úÖ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ" if transaction[0].approved else "‚ùå –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚ùå"

                            text = f"ü§ù –°–¥–µ–ª–∫–∞ ‚Ññ {transaction[0].id} {approved}\n\n" \
                                   f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction[0].exchange_rate}\n</i>" \
                                   f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction[0].buy_BTC}\n</i>" \
                                   f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ BYN: <i>{transaction[0].sale_BYN}\n</i>" \
                                   f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction[0].wallet}</i>"

                            await callback.message.edit_text(text="<i>–°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                                  f"{text}",
                                                             reply_markup=await AdminForm.pagination_transaction_ikb(
                                                                 target="Users",
                                                                 action="pagination_user_transaction",
                                                                 action_back="get_Users",
                                                                 user_id=transaction[0].user_id),
                                                             parse_mode="HTML"
                                                             )
                            await state.finish()
                        else:
                            await message.answer(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                            await state.finish()

                    elif data.get("action") == "get_CheckNumber":
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —á–µ–∫",
                                                         reply_markup=await AdminForm.back_ikb(target="Users",
                                                                                               action="get_Users")
                                                         )
                        await AdminState.CheckNumber.set()

                    elif data.get("action") == "get_UsersId":
                        await callback.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ id –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                                                         reply_markup=await AdminForm.back_ikb(target="Users",
                                                                                               action="get_Users")
                                                         )
                        await AdminState.UsersId.set()

                    elif data.get('action') == "pagination_user_transaction":
                        page = int(data.get('id'))
                        get_user_id = int(data.get('editId'))

                        user = await CRUDUsers.get(id=get_user_id)
                        transaction = await CRUDTransaction.get_all(user_id=user.id)

                        if transaction:
                            approved = "‚úÖ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ" if transaction[0].approved else "‚ùå –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚ùå"

                            text = f"ü§ù –°–¥–µ–ª–∫–∞ ‚Ññ {transaction[page].id} {approved}\n\n" \
                                   f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction[page].exchange_rate}\n</i>" \
                                   f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction[page].buy_BTC}\n</i>" \
                                   f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ BYN: <i>{transaction[page].sale_BYN}\n</i>" \
                                   f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction[page].wallet}</i>"
                            try:
                                await callback.message.edit_text(text=f"<i>–°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                                      f"{text}",
                                                                 reply_markup=await AdminForm.pagination_transaction_ikb(
                                                                     user_id=user.id,
                                                                     page=page,
                                                                     target="Users",
                                                                     action="pagination_user_transaction",
                                                                     action_back="get_Users"),
                                                                 parse_mode="HTML"
                                                                 )
                            except BadRequest:
                                await callback.message.delete()
                                await callback.message.answer(text=f"<i>–°–¥–µ–ª–∫–∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                                   f"{text}",
                                                              reply_markup=await AdminForm.pagination_transaction_ikb(
                                                                  user_id=user.id,
                                                                  page=page,
                                                                  target="Users",
                                                                  action="pagination_user_transaction",
                                                                  action_back="get_Users"),
                                                              parse_mode="HTML"
                                                              )
                        else:
                            await callback.message.edit_text(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≤–µ—Ä—à–∞–ª —Å–¥–µ–ª–æ–∫ üòû",
                                                             reply_markup=await AdminForm.back_ikb(
                                                                 target="Users",
                                                                 action="get_Users")
                                                             )

                    elif data.get('action') == "get_check_admin":
                        page = int(data.get('id'))
                        get_user_id = int(data.get('editId'))

                        user = await CRUDUsers.get(id=get_user_id)
                        transaction = await CRUDTransaction.get_all(user_id=user.id)

                        if transaction:
                            approved = "‚úÖ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ" if transaction[page].approved else "‚ùå –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚ùå"

                            text = f"ü§ù –°–¥–µ–ª–∫–∞ ‚Ññ {transaction[page].id} {approved}\n\n" \
                                   f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction[page].exchange_rate}\n</i>" \
                                   f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction[page].buy_BTC}\n</i>" \
                                   f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ BYN: <i>{transaction[page].sale_BYN}\n</i>" \
                                   f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction[page].wallet}</i>"

                            if transaction[page].check != "None":
                                try:
                                    await callback.message.delete()
                                    photo = open(f'user_check/{transaction[page].check}.jpg', 'rb')
                                    await bot.send_photo(chat_id=callback.from_user.id, photo=photo,
                                                         caption=f"<i>–°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                                 f"{text}",
                                                         reply_markup=await AdminForm.check_confirmation_ikb(
                                                             page=page,
                                                             user_id=user.id,
                                                             action_back="pagination_user_transaction",
                                                             action_confirm="get_One_ConfirmPayment")
                                                         )
                                except FileNotFoundError:
                                    pass
                            else:
                                await callback.message.edit_text(text=f"<i>–°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                                      f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–∏–ª —á–µ–∫\n\n"
                                                                      f"{text}",
                                                                 reply_markup=await AdminForm.check_confirmation_ikb(
                                                                     page=page,
                                                                     user_id=user.id,
                                                                     action_back="pagination_user_transaction",
                                                                     action_confirm="get_One_ConfirmPayment")
                                                                 )
                        else:
                            await callback.message.edit_text(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                                                             reply_markup=await AdminForm.back_ikb(target="Users",
                                                                                                   action="get_Users")
                                                             )

                    elif data.get('action') == "get_ConfirmPayment":
                        get_user_id = int(data.get('id'))
                        get_page_id = int(data.get('editId'))

                        user = await CRUDUsers.get(id=get_user_id)
                        transaction = await CRUDTransaction.get_all(user_id=user.id)

                        transaction[get_page_id].approved = True
                        await CRUDTransaction.update(transaction=transaction[get_page_id])
                        text = f"‚úÖ –í–∞–º –ø–æ—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–¥–µ–ª–∫—É ‚Ññ {transaction[get_page_id].id} ‚úÖ\n\n"\
                               f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction[get_page_id].exchange_rate}\n</i>" \
                               f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction[get_page_id].buy_BTC}\n</i>" \
                               f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ BYN: <i>{transaction[get_page_id].sale_BYN}\n</i>" \
                               f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction[get_page_id].wallet}</i>"

                        await bot.send_message(chat_id=user.user_id, text=text )

                        await callback.message.delete()
                        await callback.message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–¥–µ–ª–∫—É",
                                                      reply_markup=await AdminForm.users_ikb()
                                                      )

                    elif data.get('action') == "get_One_ConfirmPayment":
                        get_page_id = int(data.get('editId'))

                        transaction = await CRUDTransaction.get(transaction=get_page_id)
                        user = await CRUDUsers.get(id=transaction.user_id)
                        transaction.approved = True
                        await CRUDTransaction.update(transaction=transaction)
                        text = f"‚úÖ –í–∞–º –ø–æ—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–¥–µ–ª–∫—É ‚Ññ {transaction.id} ‚úÖ\n\n"\
                               f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction.exchange_rate}\n</i>" \
                               f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction.buy_BTC}\n</i>" \
                               f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ BYN: <i>{transaction.sale_BYN}\n</i>" \
                               f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction.wallet}</i>"

                        await bot.send_message(chat_id=user.user_id, text=text)

                        await callback.message.delete()
                        await callback.message.answer(text="–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–¥–µ–ª–∫—É",
                                                      reply_markup=await AdminForm.users_ikb()
                                                      )

                    elif data.get("action") == "get_ContactUser":
                        pass

        if message:
            await message.delete()

            try:
                await bot.delete_message(
                    chat_id=message.from_user.id,
                    message_id=message.message_id - 1
                )
            except BadRequest:
                pass

            if state:
                if await state.get_state() == "AdminState:COMMISSION":
                    if message.text.isdigit():
                        CONFIG.COMMISSION = message.text
                        await message.answer(text=f"–ö–æ–º–∏—Å—Å–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ {message.text}",
                                             reply_markup=await AdminForm.payment_setup_ikb())
                        await state.finish()
                    else:
                        await message.answer(text="–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä")
                        await AdminState.COMMISSION.set()

                elif await state.get_state() == "AdminState:REQUISITES":
                    if message.text.isdigit():
                        CONFIG.COMMISSION = message.text
                        await message.answer(text=f"–ö–æ–º–∏—Å—Å–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ {message.text}",
                                             reply_markup=await AdminForm.payment_setup_ikb())
                        await state.finish()
                    else:
                        await message.answer(text="–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä")
                        await AdminState.REQUISITES.set()

                elif await state.get_state() == "AdminState:CheckNumber":
                    if message.text.isdigit():
                        transaction = await CRUDTransaction.get(transaction=int(message.text))
                        if transaction:
                            approved = "‚úÖ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ" if transaction.approved else "‚ùå –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚ùå"

                            text = f"ü§ù –°–¥–µ–ª–∫–∞ ‚Ññ {transaction.id} {approved}\n\n" \
                                   f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction.exchange_rate}\n</i>" \
                                   f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction.buy_BTC}\n</i>" \
                                   f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ BYN: <i>{transaction.sale_BYN}\n</i>" \
                                   f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction.wallet}</i>"
                            if transaction.check != "None":
                                try:
                                    photo = open(f'user_check/{transaction.check}.jpg', 'rb')
                                    await bot.send_photo(chat_id=message.from_user.id, photo=photo,
                                                         caption=f"<i>–°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                                 f"{text}",
                                                         reply_markup=await AdminForm.check_confirmation_ikb(
                                                             user_id=transaction.user_id,
                                                             page=transaction.id,
                                                             action_back="get_Users",
                                                             action_confirm="get_One_ConfirmPayment")
                                                         )
                                    await state.finish()
                                except FileNotFoundError:
                                    pass
                            else:
                                await message.answer(text=f"<i>–°–¥–µ–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                          f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–±–∞–≤–∏–ª —á–µ–∫\n\n"
                                                          f"{text}",
                                                     reply_markup=await AdminForm.check_confirmation_ikb(
                                                         user_id=transaction.user_id,
                                                         page=transaction.id,
                                                         action_back="get_Users",
                                                         action_confirm="get_One_ConfirmPayment")
                                                     )
                                await state.finish()
                        else:
                            await message.answer(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ",
                                                 reply_markup=await AdminForm.back_ikb(target="Users",
                                                                                       action="get_Users")
                                                 )
                            await state.finish()

                    else:
                        await message.answer(text="–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä")
                        await AdminState.CheckNumber.set()

                elif await state.get_state() == "AdminState:UsersId":
                    if message.text.isdigit():
                        user = await CRUDUsers.get(user_id=int(message.text))
                        transaction = await CRUDTransaction.get_all(user_id=user.id)

                        if transaction:
                            approved = "‚úÖ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ" if transaction[0].approved else "‚ùå –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ ‚ùå"

                            text = f"ü§ù –°–¥–µ–ª–∫–∞ ‚Ññ {transaction[0].id} {approved}\n\n" \
                                   f"üìà –ö—É—Ä—Å –ø–æ–∫—É–ø–∫–∏: <i>{transaction[0].exchange_rate}\n</i>" \
                                   f"   ‚Çø  –ö—É–ø–ª–µ–Ω–æ BTC: <i>{transaction[0].buy_BTC}\n</i>" \
                                   f"üí∏ –ü—Ä–æ–¥–∞–Ω–æ BYN: <i>{transaction[0].sale_BYN}\n</i>" \
                                   f"üëõ –ö–æ—à–µ–ª–µ–∫ <i>{transaction[0].wallet}</i>"

                            await message.answer(text="<i>–°–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n\n"
                                                      f"{text}",
                                                 reply_markup=await AdminForm.pagination_transaction_ikb(
                                                     target="Users",
                                                     action="pagination_user_transaction",
                                                     action_back="get_Users",
                                                     user_id=user.id),
                                                 parse_mode="HTML"
                                                 )
                            await state.finish()
                        else:
                            await message.answer(text="–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                            await state.finish()
                    else:
                        await message.answer(text="–î–æ—Å—Ç—É–ø–µ–Ω –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä")
                        await AdminState.UsersId.set()
